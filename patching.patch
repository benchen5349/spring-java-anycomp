diff --git a/README.md b/README.md
index 81450a1..e81726c 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,34 @@
-# spring-java-anycomp
\ No newline at end of file
+<br />
+
+# Spring Boot Anycomp Project 
+
+### The objectives of this project is to assess the skills of the Backend Developer who will be working on Anycomp. We primarily want to see if the developer possesses the necessary Technology Stack to work on the project - Anycomp: Platform for Company incorporation and management.
+
+<br />
+
+
+# Requirements:
+* Java17
+* Spring Boot (3.4.4)
+* PostgreSQL (17.x)
+* Maven
+* Postman (For endpoints testing)
+* Git (Clone repository)
+
+<br />
+
+# Entities:
+* Buyer
+* Seller
+* Item
+* Purchase
+
+
+<br />
+
+# Notes:
+
+* To refer endpoints UI: http://yourdomain.com/swagger-ui/index.html
+* Comes with purchase pagination sample, and sorting apply into listing all rows method.
+* DTOs pattern included.
+
diff --git a/anycomp-marketplace/.gitattributes b/anycomp-marketplace/.gitattributes
new file mode 100644
index 0000000..3b41682
--- /dev/null
+++ b/anycomp-marketplace/.gitattributes
@@ -0,0 +1,2 @@
+/mvnw text eol=lf
+*.cmd text eol=crlf
diff --git a/anycomp-marketplace/.gitignore b/anycomp-marketplace/.gitignore
new file mode 100644
index 0000000..667aaef
--- /dev/null
+++ b/anycomp-marketplace/.gitignore
@@ -0,0 +1,33 @@
+HELP.md
+target/
+.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
diff --git a/anycomp-marketplace/.mvn/wrapper/maven-wrapper.properties b/anycomp-marketplace/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
index 0000000..2f94e61
--- /dev/null
+++ b/anycomp-marketplace/.mvn/wrapper/maven-wrapper.properties
@@ -0,0 +1,19 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+wrapperVersion=3.3.2
+distributionType=only-script
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip
diff --git a/anycomp-marketplace/mvnw b/anycomp-marketplace/mvnw
new file mode 100644
index 0000000..19529dd
--- /dev/null
+++ b/anycomp-marketplace/mvnw
@@ -0,0 +1,259 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Apache Maven Wrapper startup batch script, version 3.3.2
+#
+# Optional ENV vars
+# -----------------
+#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
+#   MVNW_REPOURL - repo url base for downloading maven distribution
+#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
+#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
+# ----------------------------------------------------------------------------
+
+set -euf
+[ "${MVNW_VERBOSE-}" != debug ] || set -x
+
+# OS specific support.
+native_path() { printf %s\\n "$1"; }
+case "$(uname)" in
+CYGWIN* | MINGW*)
+  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
+  native_path() { cygpath --path --windows "$1"; }
+  ;;
+esac
+
+# set JAVACMD and JAVACCMD
+set_java_home() {
+  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
+  if [ -n "${JAVA_HOME-}" ]; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+      JAVACCMD="$JAVA_HOME/jre/sh/javac"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+      JAVACCMD="$JAVA_HOME/bin/javac"
+
+      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
+        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
+        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
+        return 1
+      fi
+    fi
+  else
+    JAVACMD="$(
+      'set' +e
+      'unset' -f command 2>/dev/null
+      'command' -v java
+    )" || :
+    JAVACCMD="$(
+      'set' +e
+      'unset' -f command 2>/dev/null
+      'command' -v javac
+    )" || :
+
+    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
+      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
+      return 1
+    fi
+  fi
+}
+
+# hash string like Java String::hashCode
+hash_string() {
+  str="${1:-}" h=0
+  while [ -n "$str" ]; do
+    char="${str%"${str#?}"}"
+    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
+    str="${str#?}"
+  done
+  printf %x\\n $h
+}
+
+verbose() { :; }
+[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }
+
+die() {
+  printf %s\\n "$1" >&2
+  exit 1
+}
+
+trim() {
+  # MWRAPPER-139:
+  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
+  #   Needed for removing poorly interpreted newline sequences when running in more
+  #   exotic environments such as mingw bash on Windows.
+  printf "%s" "${1}" | tr -d '[:space:]'
+}
+
+# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
+while IFS="=" read -r key value; do
+  case "${key-}" in
+  distributionUrl) distributionUrl=$(trim "${value-}") ;;
+  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
+  esac
+done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
+[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"
+
+case "${distributionUrl##*/}" in
+maven-mvnd-*bin.*)
+  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
+  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
+  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
+  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
+  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
+  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
+  *)
+    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
+    distributionPlatform=linux-amd64
+    ;;
+  esac
+  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
+  ;;
+maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
+*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
+esac
+
+# apply MVNW_REPOURL and calculate MAVEN_HOME
+# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
+[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
+distributionUrlName="${distributionUrl##*/}"
+distributionUrlNameMain="${distributionUrlName%.*}"
+distributionUrlNameMain="${distributionUrlNameMain%-bin}"
+MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
+MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"
+
+exec_maven() {
+  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
+  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
+}
+
+if [ -d "$MAVEN_HOME" ]; then
+  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
+  exec_maven "$@"
+fi
+
+case "${distributionUrl-}" in
+*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
+*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
+esac
+
+# prepare tmp dir
+if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
+  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
+  trap clean HUP INT TERM EXIT
+else
+  die "cannot create temp dir"
+fi
+
+mkdir -p -- "${MAVEN_HOME%/*}"
+
+# Download and Install Apache Maven
+verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
+verbose "Downloading from: $distributionUrl"
+verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
+
+# select .zip or .tar.gz
+if ! command -v unzip >/dev/null; then
+  distributionUrl="${distributionUrl%.zip}.tar.gz"
+  distributionUrlName="${distributionUrl##*/}"
+fi
+
+# verbose opt
+__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
+[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v
+
+# normalize http auth
+case "${MVNW_PASSWORD:+has-password}" in
+'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
+has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
+esac
+
+if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
+  verbose "Found wget ... using wget"
+  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
+elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
+  verbose "Found curl ... using curl"
+  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
+elif set_java_home; then
+  verbose "Falling back to use Java to download"
+  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
+  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
+  cat >"$javaSource" <<-END
+	public class Downloader extends java.net.Authenticator
+	{
+	  protected java.net.PasswordAuthentication getPasswordAuthentication()
+	  {
+	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
+	  }
+	  public static void main( String[] args ) throws Exception
+	  {
+	    setDefault( new Downloader() );
+	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
+	  }
+	}
+	END
+  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
+  verbose " - Compiling Downloader.java ..."
+  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
+  verbose " - Running Downloader.java ..."
+  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
+fi
+
+# If specified, validate the SHA-256 sum of the Maven distribution zip file
+if [ -n "${distributionSha256Sum-}" ]; then
+  distributionSha256Result=false
+  if [ "$MVN_CMD" = mvnd.sh ]; then
+    echo "Checksum validation is not supported for maven-mvnd." >&2
+    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
+    exit 1
+  elif command -v sha256sum >/dev/null; then
+    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
+      distributionSha256Result=true
+    fi
+  elif command -v shasum >/dev/null; then
+    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
+      distributionSha256Result=true
+    fi
+  else
+    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
+    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
+    exit 1
+  fi
+  if [ $distributionSha256Result = false ]; then
+    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
+    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
+    exit 1
+  fi
+fi
+
+# unzip and move
+if command -v unzip >/dev/null; then
+  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
+else
+  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
+fi
+printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
+mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"
+
+clean || :
+exec_maven "$@"
diff --git a/anycomp-marketplace/mvnw.cmd b/anycomp-marketplace/mvnw.cmd
new file mode 100644
index 0000000..249bdf3
--- /dev/null
+++ b/anycomp-marketplace/mvnw.cmd
@@ -0,0 +1,149 @@
+<# : batch portion
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    http://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Apache Maven Wrapper startup batch script, version 3.3.2
+@REM
+@REM Optional ENV vars
+@REM   MVNW_REPOURL - repo url base for downloading maven distribution
+@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
+@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
+@REM ----------------------------------------------------------------------------
+
+@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
+@SET __MVNW_CMD__=
+@SET __MVNW_ERROR__=
+@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
+@SET PSModulePath=
+@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
+  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
+)
+@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
+@SET __MVNW_PSMODULEP_SAVE=
+@SET __MVNW_ARG0_NAME__=
+@SET MVNW_USERNAME=
+@SET MVNW_PASSWORD=
+@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
+@echo Cannot start maven from wrapper >&2 && exit /b 1
+@GOTO :EOF
+: end batch / begin powershell #>
+
+$ErrorActionPreference = "Stop"
+if ($env:MVNW_VERBOSE -eq "true") {
+  $VerbosePreference = "Continue"
+}
+
+# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
+$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
+if (!$distributionUrl) {
+  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
+}
+
+switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
+  "maven-mvnd-*" {
+    $USE_MVND = $true
+    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
+    $MVN_CMD = "mvnd.cmd"
+    break
+  }
+  default {
+    $USE_MVND = $false
+    $MVN_CMD = $script -replace '^mvnw','mvn'
+    break
+  }
+}
+
+# apply MVNW_REPOURL and calculate MAVEN_HOME
+# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
+if ($env:MVNW_REPOURL) {
+  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
+  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
+}
+$distributionUrlName = $distributionUrl -replace '^.*/',''
+$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
+$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
+if ($env:MAVEN_USER_HOME) {
+  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
+}
+$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
+$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"
+
+if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
+  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
+  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
+  exit $?
+}
+
+if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
+  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
+}
+
+# prepare tmp dir
+$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
+$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
+$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
+trap {
+  if ($TMP_DOWNLOAD_DIR.Exists) {
+    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
+    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
+  }
+}
+
+New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null
+
+# Download and Install Apache Maven
+Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
+Write-Verbose "Downloading from: $distributionUrl"
+Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
+
+$webclient = New-Object System.Net.WebClient
+if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
+  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
+}
+[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
+$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null
+
+# If specified, validate the SHA-256 sum of the Maven distribution zip file
+$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
+if ($distributionSha256Sum) {
+  if ($USE_MVND) {
+    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
+  }
+  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
+  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
+    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
+  }
+}
+
+# unzip and move
+Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
+Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
+try {
+  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
+} catch {
+  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
+    Write-Error "fail to move MAVEN_HOME"
+  }
+} finally {
+  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
+  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
+}
+
+Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
diff --git a/anycomp-marketplace/pom.xml b/anycomp-marketplace/pom.xml
new file mode 100644
index 0000000..9f6da99
--- /dev/null
+++ b/anycomp-marketplace/pom.xml
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>3.4.4</version>
+		<relativePath/> <!-- lookup parent from repository -->
+	</parent>
+	<groupId>anycomp.marketplace</groupId>
+	<artifactId>anycomp-marketplace</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<name>anycomp-marketplace</name>
+	<description>The objectives of this project is to assess the skills of the Backend Developer who will be working on Anycomp. We primarily want to see if the developer possesses the necessary Technology Stack to work on the project - Anycomp: Platform for Company incorporation and management.</description>
+	<url/>
+	<licenses>
+		<license/>
+	</licenses>
+	<developers>
+		<developer/>
+	</developers>
+	<scm>
+		<connection/>
+		<developerConnection/>
+		<tag/>
+		<url/>
+	</scm>
+	<properties>
+		<java.version>17</java.version>
+	</properties>
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.postgresql</groupId>
+			<artifactId>postgresql</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.springdoc</groupId>
+			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
+			<version>2.8.8</version>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<configuration>
+					<annotationProcessorPaths>
+						<path>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</path>
+					</annotationProcessorPaths>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+				<configuration>
+					<excludes>
+						<exclude>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</exclude>
+					</excludes>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/AnycompMarketplaceApplication.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/AnycompMarketplaceApplication.java
new file mode 100644
index 0000000..b01aa79
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/AnycompMarketplaceApplication.java
@@ -0,0 +1,13 @@
+package anycomp.marketplace.com;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class AnycompMarketplaceApplication {
+
+	public static void main(String[] args) {
+		SpringApplication.run(AnycompMarketplaceApplication.class, args);
+	}
+
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/BuyerController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/BuyerController.java
new file mode 100644
index 0000000..5a8fdc9
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/BuyerController.java
@@ -0,0 +1,73 @@
+package anycomp.marketplace.com.controller;
+
+import anycomp.marketplace.com.dto.BuyerDto;
+import anycomp.marketplace.com.service.BuyerService;
+import lombok.AllArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@AllArgsConstructor
+@RestController
+@RequestMapping("/api/buyers")
+public class BuyerController {
+
+    private BuyerService buyerService;
+
+    /**
+     * API to create new buyer and store
+     * @param buyerDto
+     * @return
+     */
+    @PostMapping
+    public ResponseEntity<BuyerDto> createBuyer(@RequestBody BuyerDto buyerDto) {
+        BuyerDto stored = buyerService.createBuyer(buyerDto);
+        return new ResponseEntity<>(stored, HttpStatus.CREATED);
+    }
+
+    /**
+     * API to retrieve buyer by id
+     * @param buyerId
+     * @return
+     */
+    @GetMapping("{id}")
+    public ResponseEntity<BuyerDto> getBuyerById(@PathVariable("id") Long buyerId) {
+        BuyerDto buyerDto = buyerService.getBuyerById(buyerId);
+        return ResponseEntity.ok(buyerDto);
+    }
+
+    /**
+     * API to retrieve all buyers
+     * @return
+     */
+    @GetMapping
+    public ResponseEntity<List<BuyerDto>> getAllBuyers() {
+        List<BuyerDto> buyers = buyerService.getAllBuyer();
+        return ResponseEntity.ok(buyers);
+    }
+
+    /**
+     * API to update buyer
+     * @param buyerId
+     * @param updatedBuyerDto
+     * @return
+     */
+    @PutMapping("{id}")
+    public ResponseEntity<BuyerDto> updateBuyer(@PathVariable("id") Long buyerId, @RequestBody BuyerDto updatedBuyerDto) {
+        BuyerDto buyerDto = buyerService.updateBuyer(buyerId, updatedBuyerDto);
+        return ResponseEntity.ok(buyerDto);
+    }
+
+    /**
+     * API to remove buyer by id
+     * @param buyerId
+     * @return
+     */
+    @DeleteMapping("{id}")
+    public ResponseEntity<String> deleteBuyer(@PathVariable("id") Long buyerId) {
+        buyerService.deleteBuyer(buyerId);
+        return new ResponseEntity<>("Successfully delete selected buyer.", HttpStatus.OK);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/ItemController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/ItemController.java
new file mode 100644
index 0000000..bc23031
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/ItemController.java
@@ -0,0 +1,62 @@
+package anycomp.marketplace.com.controller;
+
+import anycomp.marketplace.com.dto.ItemDto;
+import anycomp.marketplace.com.service.ItemService;
+import lombok.AllArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@AllArgsConstructor
+@RequestMapping("/api/items")
+public class ItemController {
+
+    private ItemService itemService;
+
+    /**
+     * API to retrieve item by id
+     * @param itemId
+     * @return
+     */
+    @GetMapping("{id}")
+    public ResponseEntity<ItemDto> getItemById(@PathVariable("id") Long itemId) {
+        ItemDto itemDto = itemService.getItemById(itemId);
+        return ResponseEntity.ok(itemDto);
+    }
+
+    /**
+     * API to retrieve all items
+     * @return
+     */
+    @GetMapping
+    public ResponseEntity<List<ItemDto>> getAllItems() {
+        List<ItemDto> iiems = itemService.getAllItem();
+        return ResponseEntity.ok(iiems);
+    }
+
+    /**
+     * API to update item
+     * @param itemId
+     * @param updatedItemDto
+     * @return
+     */
+    @PutMapping("{id}")
+    public ResponseEntity<ItemDto> updateItem(@PathVariable("id") Long itemId, @RequestBody ItemDto updatedItemDto) {
+        ItemDto itemDto = itemService.updateItem(itemId, updatedItemDto);
+        return ResponseEntity.ok(itemDto);
+    }
+
+    /**
+     * API to remove item by id
+     * @param itemId
+     * @return
+     */
+    @DeleteMapping("{id}")
+    public ResponseEntity<String> deleteItem(@PathVariable("id") Long itemId) {
+        itemService.deleteItem(itemId);
+        return new ResponseEntity<>("Successfully delete selected item.", HttpStatus.OK);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/PurchaseController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/PurchaseController.java
new file mode 100644
index 0000000..19f808e
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/PurchaseController.java
@@ -0,0 +1,62 @@
+package anycomp.marketplace.com.controller;
+
+import anycomp.marketplace.com.dto.ItemDto;
+import anycomp.marketplace.com.dto.PurchaseDto;
+import anycomp.marketplace.com.service.PurchaseService;
+import lombok.AllArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@AllArgsConstructor
+@RequestMapping("/api/purchases")
+public class PurchaseController {
+
+    private PurchaseService purchaseService;
+
+    /**
+     * API to retrieve purchase by id
+     * @param purchaseId
+     * @return
+     */
+    @GetMapping("{id}")
+    public ResponseEntity<PurchaseDto> getPurchaseById(@PathVariable("id") Long purchaseId) {
+        PurchaseDto purchaseDto = purchaseService.getPurchaseById(purchaseId);
+        return ResponseEntity.ok(purchaseDto);
+    }
+
+    /**
+     * API to retrieve all purchases
+     * @return
+     */
+    @GetMapping
+    public ResponseEntity<List<PurchaseDto>> getAllPurchases() {
+        List<PurchaseDto> purchases = purchaseService.getAllPurchases();
+        return ResponseEntity.ok(purchases);
+    }
+
+    /**
+     * API to create new purchase and store
+     * @param buyerId
+     * @param purchaseDto
+     * @return
+     */
+    @PostMapping("{buyerId}/{itemId}")
+    public ResponseEntity<PurchaseDto> createPurchase(@PathVariable("buyerId") Long buyerId, @PathVariable("itemId") Long itemId, @RequestBody PurchaseDto purchaseDto) {
+        PurchaseDto stored = purchaseService.createPurchase(buyerId, itemId, purchaseDto);
+        return new ResponseEntity<>(stored, HttpStatus.CREATED);
+    }
+
+    /**
+     * API to retrieve all purchases by pagination
+     * @return
+     */
+    @GetMapping("pagination/{page}/{pageSize}")
+    public ResponseEntity<List<PurchaseDto>> getAllPurchasesByPagination(@PathVariable("page") int page, @PathVariable("pageSize") int pageSize) {
+        List<PurchaseDto> purchases = purchaseService.getAllPurchasesByPagination(page, pageSize);
+        return ResponseEntity.ok(purchases);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerController.java
new file mode 100644
index 0000000..b9805ec
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerController.java
@@ -0,0 +1,73 @@
+package anycomp.marketplace.com.controller;
+
+import anycomp.marketplace.com.dto.SellerDto;
+import anycomp.marketplace.com.service.SellerService;
+import lombok.AllArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@AllArgsConstructor
+@RestController
+@RequestMapping("/api/sellers")
+public class SellerController {
+
+    private SellerService sellerService;
+
+    /**
+     * API to create new seller and store
+     * @param sellerDto
+     * @return
+     */
+    @PostMapping
+    public ResponseEntity<SellerDto> createSeller(@RequestBody SellerDto sellerDto) {
+        SellerDto stored = sellerService.createSeller(sellerDto);
+        return new ResponseEntity<>(stored, HttpStatus.CREATED);
+    }
+
+    /**
+     * API to retrieve seller by id
+     * @param sellerId
+     * @return
+     */
+    @GetMapping("{id}")
+    public ResponseEntity<SellerDto> getSellerById(@PathVariable("id") Long sellerId) {
+        SellerDto sellerDto = sellerService.getSellerById(sellerId);
+        return ResponseEntity.ok(sellerDto);
+    }
+
+    /**
+     * API to retrieve all sellers
+     * @return
+     */
+    @GetMapping
+    public ResponseEntity<List<SellerDto>> getAllSellers() {
+        List<SellerDto> sellers = sellerService.getAllSeller();
+        return ResponseEntity.ok(sellers);
+    }
+
+    /**
+     * API to update seller
+     * @param sellerId
+     * @param updatedSellerDto
+     * @return
+     */
+    @PutMapping("{id}")
+    public ResponseEntity<SellerDto> updateSeller(@PathVariable("id") Long sellerId, @RequestBody SellerDto updatedSellerDto) {
+        SellerDto sellerDto = sellerService.updateSeller(sellerId, updatedSellerDto);
+        return ResponseEntity.ok(sellerDto);
+    }
+
+    /**
+     * API to remove seller by id
+     * @param sellerId
+     * @return
+     */
+    @DeleteMapping("{id}")
+    public ResponseEntity<String> deleteSeller(@PathVariable("id") Long sellerId) {
+        sellerService.deleteSeller(sellerId);
+        return new ResponseEntity<>("Successfully delete selected seller.", HttpStatus.OK);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerItemController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerItemController.java
new file mode 100644
index 0000000..a7c8afa
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerItemController.java
@@ -0,0 +1,40 @@
+package anycomp.marketplace.com.controller;
+
+import anycomp.marketplace.com.dto.ItemDto;
+import anycomp.marketplace.com.service.SellerItemService;
+import lombok.AllArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@AllArgsConstructor
+@RequestMapping("/api/{id}/items")
+public class SellerItemController {
+
+    private SellerItemService sellerItemService;
+
+    /**
+     * API to create new seller and store
+     * @param sellerId
+     * @param itemDto
+     * @return
+     */
+    @PostMapping()
+    public ResponseEntity<ItemDto> createItemToSeller(@PathVariable("id") Long sellerId, @RequestBody ItemDto itemDto) {
+        ItemDto stored = sellerItemService.createItemToSeller(sellerId, itemDto);
+        return new ResponseEntity<>(stored, HttpStatus.CREATED);
+    }
+
+    /**
+     * API to retrieve all seller's items
+     * @return
+     */
+    @GetMapping
+    public ResponseEntity<List<ItemDto>> getAllItemToSeller(@PathVariable("id") Long sellerId) {
+        List<ItemDto> items = sellerItemService.getAllItemToSeller(sellerId);
+        return ResponseEntity.ok(items);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/BuyerDto.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/BuyerDto.java
new file mode 100644
index 0000000..6548996
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/BuyerDto.java
@@ -0,0 +1,24 @@
+package anycomp.marketplace.com.dto;
+
+import anycomp.marketplace.com.entity.Purchase;
+import jakarta.persistence.CascadeType;
+import jakarta.persistence.FetchType;
+import jakarta.persistence.OneToMany;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.List;
+import java.util.Set;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+public class BuyerDto {
+    private Long id;
+    private String name;
+    private String email;
+    private List<Purchase> purchases;
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/ItemDto.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/ItemDto.java
new file mode 100644
index 0000000..a4a92a2
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/ItemDto.java
@@ -0,0 +1,18 @@
+package anycomp.marketplace.com.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+public class ItemDto {
+    private Long id;
+    private String name;
+    private String description;
+    private Double price;
+    private int quantity;
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/PurchaseDto.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/PurchaseDto.java
new file mode 100644
index 0000000..6962787
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/PurchaseDto.java
@@ -0,0 +1,16 @@
+package anycomp.marketplace.com.dto;
+
+import lombok.*;
+import java.sql.Timestamp;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+public class PurchaseDto {
+    private Long id;
+    private int quantity;
+    private Timestamp purchaseDate;
+    private Long buyerId;
+    private Long itemId;
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/SellerDto.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/SellerDto.java
new file mode 100644
index 0000000..6a4e087
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/SellerDto.java
@@ -0,0 +1,20 @@
+package anycomp.marketplace.com.dto;
+
+import anycomp.marketplace.com.entity.Item;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.List;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+public class SellerDto {
+    private Long id;
+    private String name;
+    private String email;
+    private List<Item> items;
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Buyer.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Buyer.java
new file mode 100644
index 0000000..38a92a6
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Buyer.java
@@ -0,0 +1,34 @@
+package anycomp.marketplace.com.entity;
+
+import jakarta.persistence.*;
+import lombok.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "buyers")
+public class Buyer {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(name = "name")
+    private String name;
+
+    @Column(name = "email", nullable = false, unique = true)
+    private String email;
+
+    @OneToMany(mappedBy = "buyer", cascade = CascadeType.ALL, fetch=FetchType.EAGER)
+    private List<Purchase> purchases = new ArrayList<>();
+
+    public Buyer(
+            Long id,
+            String name,
+            String email
+    ) {}
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Item.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Item.java
new file mode 100644
index 0000000..a10c25a
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Item.java
@@ -0,0 +1,47 @@
+package anycomp.marketplace.com.entity;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "items")
+public class Item {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(name = "name")
+    private String name;
+
+    @Column(name = "description")
+    private String description;
+
+    @Column(name = "price")
+    private Double price;
+
+    @Column(name = "quantity")
+    private int quantity;
+
+    @ManyToOne
+    @JoinColumn(name = "seller_id", referencedColumnName = "id")
+    @JsonIgnore
+    private Seller seller;
+
+    // Constructor
+    public Item(
+            Long id,
+            String name,
+            String description,
+            Double price,
+            int quantity
+    ) {}
+
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Purchase.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Purchase.java
new file mode 100644
index 0000000..d7bbc11
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Purchase.java
@@ -0,0 +1,36 @@
+package anycomp.marketplace.com.entity;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import jakarta.persistence.*;
+import lombok.*;
+
+import java.sql.Timestamp;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "purchases")
+public class Purchase {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    private int quantity;
+    private Timestamp purchaseDate;
+
+    @ManyToOne(cascade = CascadeType.ALL)
+    @JoinColumn(name = "buyer_id", referencedColumnName = "id")
+    @JsonIgnore
+    private Buyer buyer;
+
+    @ManyToOne(cascade = CascadeType.ALL)
+    @JoinColumn(name = "item_id", referencedColumnName = "id")
+    @JsonIgnore
+    private Item item;
+
+    // Constructor
+    public Purchase(Long id, int quantity, Timestamp purchaseDate) {
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Seller.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Seller.java
new file mode 100644
index 0000000..7cf65b7
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Seller.java
@@ -0,0 +1,38 @@
+package anycomp.marketplace.com.entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "sellers")
+public class Seller {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(name = "name")
+    private String name;
+
+    @Column(name = "email", nullable = false, unique = true)
+    private String email;
+
+    @OneToMany(mappedBy = "seller", cascade = CascadeType.ALL)
+    private List<Item> item = new ArrayList<>();
+
+    // Constructor
+    public Seller(
+            Long id,
+            String name,
+            String email
+    ) {}
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/OutStockException.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/OutStockException.java
new file mode 100644
index 0000000..89a8626
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/OutStockException.java
@@ -0,0 +1,15 @@
+package anycomp.marketplace.com.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(value = HttpStatus.CONFLICT)
+public class OutStockException extends RuntimeException {
+    /**
+     * 409 conflict
+     * @param message
+     */
+    public OutStockException(String message) {
+        super(message);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/ResourceNotFoundException.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/ResourceNotFoundException.java
new file mode 100644
index 0000000..7960348
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/ResourceNotFoundException.java
@@ -0,0 +1,15 @@
+package anycomp.marketplace.com.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(value = HttpStatus.NOT_FOUND)
+public class ResourceNotFoundException extends RuntimeException {
+    /**
+     * 404 not found
+     * @param message
+     */
+    public ResourceNotFoundException(String message) {
+        super(message);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/BuyerMapper.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/BuyerMapper.java
new file mode 100644
index 0000000..5d4312b
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/BuyerMapper.java
@@ -0,0 +1,30 @@
+package anycomp.marketplace.com.mapper;
+
+import anycomp.marketplace.com.dto.BuyerDto;
+import anycomp.marketplace.com.entity.Buyer;
+
+public class BuyerMapper {
+    /**
+     * Convert buyer into buyerDto
+     **/
+    public static BuyerDto mapToBuyerDto(Buyer buyer) {
+        return new BuyerDto(
+                buyer.getId(),
+                buyer.getName(),
+                buyer.getEmail(),
+                buyer.getPurchases()
+        );
+    }
+
+    /**
+     * Convert buyerDto into buyer
+     **/
+    public static Buyer mapToBuyer(BuyerDto buyerDto) {
+        return new Buyer(
+                buyerDto.getId(),
+                buyerDto.getName(),
+                buyerDto.getEmail(),
+                buyerDto.getPurchases()
+        );
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/ItemMapper.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/ItemMapper.java
new file mode 100644
index 0000000..9c2659f
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/ItemMapper.java
@@ -0,0 +1,32 @@
+package anycomp.marketplace.com.mapper;
+
+import anycomp.marketplace.com.dto.ItemDto;
+import anycomp.marketplace.com.entity.Item;
+
+public class ItemMapper {
+    /**
+     * Convert item into itemDto
+     **/
+    public static ItemDto mapToItemDto(Item item) {
+        return new ItemDto(
+                item.getId(),
+                item.getName(),
+                item.getDescription(),
+                item.getPrice(),
+                item.getQuantity()
+        );
+    }
+
+    /**
+     * Convert itemDto into item
+     **/
+    public static Item mapToItem(ItemDto itemDto) {
+        return new Item(
+                itemDto.getId(),
+                itemDto.getName(),
+                itemDto.getDescription(),
+                itemDto.getPrice(),
+                itemDto.getQuantity()
+        );
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/PurchaseMapper.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/PurchaseMapper.java
new file mode 100644
index 0000000..d33a558
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/PurchaseMapper.java
@@ -0,0 +1,30 @@
+package anycomp.marketplace.com.mapper;
+
+import anycomp.marketplace.com.dto.PurchaseDto;
+import anycomp.marketplace.com.entity.Purchase;
+
+public class PurchaseMapper {
+    /**
+     * Convert purchase into purchaseDto
+     **/
+    public static PurchaseDto mapToPurchaseDto(Purchase purchase) {
+        return new PurchaseDto(
+                purchase.getId(),
+                purchase.getQuantity(),
+                purchase.getPurchaseDate(),
+                purchase.getBuyer().getId(),
+                purchase.getItem().getId()
+        );
+    }
+
+    /**
+     * Convert purchaseDto into purchase
+     **/
+    public static Purchase mapToPurchase(PurchaseDto purchaseDto) {
+        return new Purchase(
+                purchaseDto.getId(),
+                purchaseDto.getQuantity(),
+                purchaseDto.getPurchaseDate()
+        );
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/SellerMapper.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/SellerMapper.java
new file mode 100644
index 0000000..bb390a6
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/SellerMapper.java
@@ -0,0 +1,30 @@
+package anycomp.marketplace.com.mapper;
+
+import anycomp.marketplace.com.dto.SellerDto;
+import anycomp.marketplace.com.entity.Seller;
+
+public class SellerMapper {
+    /**
+     * Convert seller into sellerDto
+     **/
+    public static SellerDto mapToSellerDto(Seller seller) {
+        return new SellerDto(
+                seller.getId(),
+                seller.getName(),
+                seller.getEmail(),
+                seller.getItem()
+        );
+    }
+
+    /**
+     * Convert sellerDto into seller
+     **/
+    public static Seller mapToSeller(SellerDto sellerDto) {
+        return new Seller(
+                sellerDto.getId(),
+                sellerDto.getName(),
+                sellerDto.getEmail(),
+                sellerDto.getItems()
+        );
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/BuyerRepository.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/BuyerRepository.java
new file mode 100644
index 0000000..310f472
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/BuyerRepository.java
@@ -0,0 +1,7 @@
+package anycomp.marketplace.com.repository;
+
+import anycomp.marketplace.com.entity.Buyer;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface BuyerRepository extends JpaRepository<Buyer, Long> {
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/ItemRepository.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/ItemRepository.java
new file mode 100644
index 0000000..da5e231
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/ItemRepository.java
@@ -0,0 +1,11 @@
+package anycomp.marketplace.com.repository;
+
+import anycomp.marketplace.com.entity.Item;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface ItemRepository extends JpaRepository<Item, Long> {
+    // find all items belong to the seller id
+    List<Item> findAllBySellerId(Long sellerId);
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/PurchaseRepository.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/PurchaseRepository.java
new file mode 100644
index 0000000..7a69b76
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/PurchaseRepository.java
@@ -0,0 +1,7 @@
+package anycomp.marketplace.com.repository;
+
+import anycomp.marketplace.com.entity.Purchase;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface PurchaseRepository extends JpaRepository<Purchase, Long> {
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/SellerRepository.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/SellerRepository.java
new file mode 100644
index 0000000..90e87ab
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/SellerRepository.java
@@ -0,0 +1,7 @@
+package anycomp.marketplace.com.repository;
+
+import anycomp.marketplace.com.entity.Seller;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface SellerRepository extends JpaRepository<Seller, Long> {
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/BuyerService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/BuyerService.java
new file mode 100644
index 0000000..32e04e3
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/BuyerService.java
@@ -0,0 +1,22 @@
+package anycomp.marketplace.com.service;
+
+import anycomp.marketplace.com.dto.BuyerDto;
+
+import java.util.List;
+
+public interface BuyerService {
+    /** Create new buyer **/
+    BuyerDto createBuyer(BuyerDto buyerDto);
+
+    /** Get buyers **/
+    List<BuyerDto> getAllBuyer();
+
+    /** Get specific buyer **/
+    BuyerDto getBuyerById(Long buyerId);
+
+    /** Update buyer **/
+    BuyerDto updateBuyer(Long buyerId, BuyerDto updatedBuyerDto);
+
+    /** Delete specific buyer **/
+    void deleteBuyer(Long buyerId);
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/ItemService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/ItemService.java
new file mode 100644
index 0000000..058f5d3
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/ItemService.java
@@ -0,0 +1,19 @@
+package anycomp.marketplace.com.service;
+
+import anycomp.marketplace.com.dto.ItemDto;
+
+import java.util.List;
+
+public interface ItemService {
+    /** Get specific item **/
+    ItemDto getItemById(Long itemId);
+
+    /** Get all items **/
+    List<ItemDto> getAllItem();
+
+    /** Update item **/
+    ItemDto updateItem(Long itemId, ItemDto updatedItemDto);
+
+    /** Delete specific item **/
+    void deleteItem(Long itemId);
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/PurchaseService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/PurchaseService.java
new file mode 100644
index 0000000..0dd0a6a
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/PurchaseService.java
@@ -0,0 +1,19 @@
+package anycomp.marketplace.com.service;
+
+import anycomp.marketplace.com.dto.PurchaseDto;
+
+import java.util.List;
+
+public interface PurchaseService {
+    /** Get specific purchase **/
+    PurchaseDto getPurchaseById(Long purchaseId);
+
+    /** Get all purchases **/
+    List<PurchaseDto> getAllPurchases();
+
+    /** Make purchase **/
+    PurchaseDto createPurchase(Long buyerId, Long itemId, PurchaseDto purchaseDto);
+
+    /** Get all purchases by pagination **/
+    List<PurchaseDto> getAllPurchasesByPagination(int page, int pageSize);
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerItemService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerItemService.java
new file mode 100644
index 0000000..8d70047
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerItemService.java
@@ -0,0 +1,13 @@
+package anycomp.marketplace.com.service;
+
+import anycomp.marketplace.com.dto.ItemDto;
+
+import java.util.List;
+
+public interface SellerItemService {
+    /** Create new item for the seller **/
+    ItemDto createItemToSeller(Long sellerId, ItemDto itemDto);
+
+    /** Get all items belong to the seller **/
+    List<ItemDto> getAllItemToSeller(Long sellerId);
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerService.java
new file mode 100644
index 0000000..f21bf7a
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerService.java
@@ -0,0 +1,22 @@
+package anycomp.marketplace.com.service;
+
+import anycomp.marketplace.com.dto.SellerDto;
+
+import java.util.List;
+
+public interface SellerService {
+    /** Create new seller **/
+    SellerDto createSeller(SellerDto sellerDto);
+
+    /** Get specific seller **/
+    SellerDto getSellerById(Long sellerId);
+
+    /** Get sellers **/
+    List<SellerDto> getAllSeller();
+
+    /** Update seller **/
+    SellerDto updateSeller(Long sellerId, SellerDto updatedSellerDto);
+
+    /** Delete specific seller **/
+    void deleteSeller(Long sellerId);
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/BuyerServiceImpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/BuyerServiceImpl.java
new file mode 100644
index 0000000..9ccd5e2
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/BuyerServiceImpl.java
@@ -0,0 +1,95 @@
+package anycomp.marketplace.com.service.impl;
+
+import anycomp.marketplace.com.dto.BuyerDto;
+import anycomp.marketplace.com.entity.Buyer;
+import anycomp.marketplace.com.exception.ResourceNotFoundException;
+import anycomp.marketplace.com.mapper.BuyerMapper;
+import anycomp.marketplace.com.repository.BuyerRepository;
+import anycomp.marketplace.com.service.BuyerService;
+import lombok.AllArgsConstructor;
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@AllArgsConstructor
+public class BuyerServiceImpl implements BuyerService {
+
+    private BuyerRepository buyerRepository;
+
+    /**
+     * crete new buyer method
+     * @param buyerDto
+     * @return
+     */
+    @Override
+    public BuyerDto createBuyer(BuyerDto buyerDto) {
+        Buyer buyer = BuyerMapper.mapToBuyer(buyerDto);
+        Buyer save = buyerRepository.save(buyer);
+
+        return BuyerMapper.mapToBuyerDto(save);
+    }
+
+    /**
+     * get buyer by id method
+     * @param buyerId
+     * @return
+     */
+    @Override
+    public BuyerDto getBuyerById(Long buyerId) {
+        Buyer buyer = buyerRepository.findById(buyerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Buyer not found from the given id: " + buyerId));
+
+        return BuyerMapper.mapToBuyerDto(buyer);
+    }
+
+    /**
+     * get all the buyer method
+     * @return
+     */
+    @Override
+    public List<BuyerDto> getAllBuyer() {
+        List<Buyer> buyers = buyerRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
+        return buyers
+                .stream()
+                .map(BuyerMapper::mapToBuyerDto)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * find buyer and update method
+     * @param buyerId
+     * @param updatedBuyerDto
+     * @return
+     */
+    @Override
+    public BuyerDto updateBuyer(Long buyerId, BuyerDto updatedBuyerDto) {
+        // find
+        Buyer buyer = buyerRepository.findById(buyerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Buyer invalid from the given id: " + buyerId));
+
+        // set
+        buyer.setName(updatedBuyerDto.getName());
+        buyer.setEmail(updatedBuyerDto.getEmail());
+
+        Buyer updatedObj = buyerRepository.save(buyer);
+
+        return BuyerMapper.mapToBuyerDto(updatedObj);
+
+    }
+
+    /**
+     * find buyer and delete method
+     * @param buyerId
+     */
+    @Override
+    public void deleteBuyer(Long buyerId) {
+        // find
+        Buyer buyer = buyerRepository.findById(buyerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Buyer invalid from the given id: " + buyerId));
+
+        buyerRepository.deleteById(buyerId);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/ItemServiceImpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/ItemServiceImpl.java
new file mode 100644
index 0000000..80124dd
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/ItemServiceImpl.java
@@ -0,0 +1,81 @@
+package anycomp.marketplace.com.service.impl;
+
+import anycomp.marketplace.com.dto.ItemDto;
+import anycomp.marketplace.com.entity.Item;
+import anycomp.marketplace.com.exception.ResourceNotFoundException;
+import anycomp.marketplace.com.mapper.ItemMapper;
+import anycomp.marketplace.com.repository.ItemRepository;
+import anycomp.marketplace.com.service.ItemService;
+import lombok.AllArgsConstructor;
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@AllArgsConstructor
+public class ItemServiceImpl implements ItemService {
+
+    private ItemRepository itemRepository;
+
+    /**
+     * get item by id method
+     * @param itemId
+     * @return
+     */
+    @Override
+    public ItemDto getItemById(Long itemId) {
+        Item item = itemRepository.findById(itemId)
+                .orElseThrow(() -> new ResourceNotFoundException("Item not found from given id: " + itemId));
+
+        return ItemMapper.mapToItemDto(item);
+    }
+
+    /**
+     * get all the items method
+     * @return
+     */
+    @Override
+    public List<ItemDto> getAllItem() {
+        List<Item> items = itemRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
+        return items
+                .stream()
+                .map(ItemMapper::mapToItemDto)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * find item and update method
+     * @param itemId
+     * @param updatedItemDto
+     * @return
+     */
+    @Override
+    public ItemDto updateItem(Long itemId, ItemDto updatedItemDto) {
+        Item item = itemRepository.findById(itemId)
+                .orElseThrow(() -> new ResourceNotFoundException("Item not found from given id: " + itemId));
+
+        item.setName(updatedItemDto.getName());
+        item.setDescription(updatedItemDto.getDescription());
+        item.setPrice(updatedItemDto.getPrice());
+        item.setQuantity(updatedItemDto.getQuantity());
+        //item.setSeller(item.getSeller());
+
+        Item updatedObj = itemRepository.save(item);
+
+        return ItemMapper.mapToItemDto(updatedObj);
+    }
+
+    /**
+     * find item and delete method
+     * @param itemId
+     */
+    @Override
+    public void deleteItem(Long itemId) {
+        Item item = itemRepository.findById(itemId)
+                .orElseThrow(() -> new ResourceNotFoundException("Item not found from given id: " + itemId));
+
+        itemRepository.deleteById(itemId);
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/PurchaseServiceimpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/PurchaseServiceimpl.java
new file mode 100644
index 0000000..121962d
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/PurchaseServiceimpl.java
@@ -0,0 +1,101 @@
+package anycomp.marketplace.com.service.impl;
+
+import anycomp.marketplace.com.dto.PurchaseDto;
+import anycomp.marketplace.com.entity.Buyer;
+import anycomp.marketplace.com.entity.Item;
+import anycomp.marketplace.com.entity.Purchase;
+import anycomp.marketplace.com.exception.OutStockException;
+import anycomp.marketplace.com.exception.ResourceNotFoundException;
+import anycomp.marketplace.com.mapper.PurchaseMapper;
+import anycomp.marketplace.com.repository.BuyerRepository;
+import anycomp.marketplace.com.repository.ItemRepository;
+import anycomp.marketplace.com.repository.PurchaseRepository;
+import anycomp.marketplace.com.service.PurchaseService;
+import lombok.AllArgsConstructor;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@AllArgsConstructor
+public class PurchaseServiceimpl implements PurchaseService {
+
+    private PurchaseRepository purchaseRepository;
+    private BuyerRepository buyerRepository;
+    private ItemRepository itemRepository;
+
+    /**
+     * get purchase by id method
+     * @param purchaseId
+     * @return
+     */
+    @Override
+    public PurchaseDto getPurchaseById(Long purchaseId) {
+        Purchase purchase = purchaseRepository.findById(purchaseId)
+                .orElseThrow(() -> new ResourceNotFoundException("Purchase not found from given id: " + purchaseId));
+
+        return PurchaseMapper.mapToPurchaseDto(purchase);
+    }
+
+    /**
+     * get all the purchases method
+     * @return
+     */
+    @Override
+    public List<PurchaseDto> getAllPurchases() {
+        List<Purchase> purchases = purchaseRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
+
+        return purchases
+                .stream()
+                .map(PurchaseMapper::mapToPurchaseDto)
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public PurchaseDto createPurchase(Long buyerId, Long itemId, PurchaseDto purchaseDto) {
+        Buyer buyer = buyerRepository.findById(buyerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Buyer not found from given id: " + buyerId));
+
+        Item item = itemRepository.findById(itemId)
+                .orElseThrow(() -> new ResourceNotFoundException("Item not found from given id: " + itemId));
+
+        // quantity less than 0
+        if(item.getQuantity() < 1) {
+            throw new OutStockException("Item out of stock.");
+        }
+
+        // compare purchase quantity & current item quantity
+        if(purchaseDto.getQuantity() > item.getQuantity()) {
+            throw new OutStockException("Item not enough stock to be purchased. Stock left: (" + (item.getQuantity() - purchaseDto.getQuantity()) + ")");
+        }
+
+        Purchase purchase = PurchaseMapper.mapToPurchase(purchaseDto);
+
+        purchase.setBuyer(buyer);
+        purchase.setItem(item);
+        purchase.setQuantity(purchaseDto.getQuantity());
+        purchase.setPurchaseDate(purchaseDto.getPurchaseDate());
+
+        Purchase save = purchaseRepository.save(purchase);
+
+        // update item quantity
+        item.setQuantity(item.getQuantity() - save.getQuantity());
+        itemRepository.save(item);
+
+        return PurchaseMapper.mapToPurchaseDto(save);
+    }
+
+    @Override
+    public List<PurchaseDto> getAllPurchasesByPagination(int page, int pageSize) {
+        Page<Purchase> purchases = purchaseRepository.findAll(PageRequest.of(page, pageSize));
+
+        return purchases
+                .stream()
+                .map(PurchaseMapper::mapToPurchaseDto)
+                .collect(Collectors.toList());
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerItemServiceImpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerItemServiceImpl.java
new file mode 100644
index 0000000..f733186
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerItemServiceImpl.java
@@ -0,0 +1,60 @@
+package anycomp.marketplace.com.service.impl;
+
+import anycomp.marketplace.com.dto.ItemDto;
+import anycomp.marketplace.com.entity.Item;
+import anycomp.marketplace.com.entity.Seller;
+import anycomp.marketplace.com.exception.ResourceNotFoundException;
+import anycomp.marketplace.com.mapper.ItemMapper;
+import anycomp.marketplace.com.repository.ItemRepository;
+import anycomp.marketplace.com.repository.SellerRepository;
+import anycomp.marketplace.com.service.SellerItemService;
+import lombok.AllArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@AllArgsConstructor
+public class SellerItemServiceImpl implements SellerItemService {
+
+    private SellerRepository sellerRepository;
+    private ItemRepository itemRepository;
+
+    /**
+     * add item to the seller method
+     * @param sellerId
+     * @param itemDto
+     * @return
+     */
+    @Override
+    public ItemDto createItemToSeller(Long sellerId, ItemDto itemDto) {
+        Seller seller = sellerRepository.findById(sellerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Seller not found from the given id: " + sellerId));
+
+        Item item = ItemMapper.mapToItem(itemDto);
+
+        item.setName(itemDto.getName());
+        item.setDescription(itemDto.getDescription());
+        item.setPrice(itemDto.getPrice());
+        item.setQuantity(itemDto.getQuantity());
+        item.setSeller(seller);
+
+        Item save = itemRepository.save(item);
+
+        return ItemMapper.mapToItemDto(save);
+    }
+
+    /**
+     * get all the item from the seller method
+     * @return
+     */
+    @Override
+    public List<ItemDto> getAllItemToSeller(Long sellerId) {
+        List<Item> items = itemRepository.findAllBySellerId(sellerId);
+        return items
+                .stream()
+                .map(ItemMapper::mapToItemDto)
+                .collect(Collectors.toList());
+    }
+}
diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerServiceImpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerServiceImpl.java
new file mode 100644
index 0000000..ac7c437
--- /dev/null
+++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerServiceImpl.java
@@ -0,0 +1,91 @@
+package anycomp.marketplace.com.service.impl;
+
+import anycomp.marketplace.com.dto.SellerDto;
+import anycomp.marketplace.com.entity.Seller;
+import anycomp.marketplace.com.exception.ResourceNotFoundException;
+import anycomp.marketplace.com.mapper.SellerMapper;
+import anycomp.marketplace.com.repository.SellerRepository;
+import anycomp.marketplace.com.service.SellerService;
+import lombok.AllArgsConstructor;
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@AllArgsConstructor
+public class SellerServiceImpl implements SellerService {
+    private SellerRepository sellerRepository;
+
+
+    /**
+     * crete new seller method
+     * @param sellerDto
+     * @return
+     */
+    @Override
+    public SellerDto createSeller(SellerDto sellerDto) {
+        Seller seller = SellerMapper.mapToSeller(sellerDto);
+        Seller save = sellerRepository.save(seller);
+
+        return SellerMapper.mapToSellerDto(save);
+    }
+
+    /**
+     * get selleer by id method
+     * @param sellerId
+     * @return
+     */
+    @Override
+    public SellerDto getSellerById(Long sellerId) {
+        Seller seller = sellerRepository.findById(sellerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Seller not found from the given id: " + sellerId));
+
+        return SellerMapper.mapToSellerDto(seller);
+    }
+
+    /**
+     * get all the seller method
+     * @return
+     */
+    @Override
+    public List<SellerDto> getAllSeller() {
+        List<Seller> sellers = sellerRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
+        return sellers
+                .stream()
+                .map(SellerMapper::mapToSellerDto)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * find seller and update method
+     * @param sellerId
+     * @param updatedSellerDto
+     * @return
+     */
+    @Override
+    public SellerDto updateSeller(Long sellerId, SellerDto updatedSellerDto) {
+        Seller seller = sellerRepository.findById(sellerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Seller invalid from the given id: " + sellerId));
+
+        seller.setName(updatedSellerDto.getName());
+        seller.setEmail(updatedSellerDto.getEmail());
+
+        Seller updatedObj = sellerRepository.save(seller);
+
+        return SellerMapper.mapToSellerDto(updatedObj);
+    }
+
+    /**
+     * find seller and delete method
+     * @param sellerId
+     */
+    @Override
+    public void deleteSeller(Long sellerId) {
+        Seller seller = sellerRepository.findById(sellerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Seller invalid from the given id: " + sellerId));
+
+        sellerRepository.deleteById(sellerId);
+    }
+}
diff --git a/anycomp-marketplace/src/main/resources/application.properties b/anycomp-marketplace/src/main/resources/application.properties
new file mode 100644
index 0000000..ad770ae
--- /dev/null
+++ b/anycomp-marketplace/src/main/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=anycomp-marketplace
+spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
+spring.datasource.username=postgres
+spring.datasource.password=postgres
+
+spring.jpa.hibernate.ddl-auto=update
\ No newline at end of file
diff --git a/anycomp-marketplace/src/test/java/anycomp/marketplace/com/AnycompMarketplaceApplicationTests.java b/anycomp-marketplace/src/test/java/anycomp/marketplace/com/AnycompMarketplaceApplicationTests.java
new file mode 100644
index 0000000..d40eccd
--- /dev/null
+++ b/anycomp-marketplace/src/test/java/anycomp/marketplace/com/AnycompMarketplaceApplicationTests.java
@@ -0,0 +1,13 @@
+package anycomp.marketplace.com;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class AnycompMarketplaceApplicationTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
diff --git a/patching.patch b/patching.patch
new file mode 100644
index 0000000..fa869c1
--- /dev/null
+++ b/patching.patch
@@ -0,0 +1,2093 @@
+diff --git a/anycomp-marketplace/.gitattributes b/anycomp-marketplace/.gitattributes
+new file mode 100644
+index 0000000..3b41682
+--- /dev/null
++++ b/anycomp-marketplace/.gitattributes
+@@ -0,0 +1,2 @@
++/mvnw text eol=lf
++*.cmd text eol=crlf
+diff --git a/anycomp-marketplace/.gitignore b/anycomp-marketplace/.gitignore
+new file mode 100644
+index 0000000..667aaef
+--- /dev/null
++++ b/anycomp-marketplace/.gitignore
+@@ -0,0 +1,33 @@
++HELP.md
++target/
++.mvn/wrapper/maven-wrapper.jar
++!**/src/main/**/target/
++!**/src/test/**/target/
++
++### STS ###
++.apt_generated
++.classpath
++.factorypath
++.project
++.settings
++.springBeans
++.sts4-cache
++
++### IntelliJ IDEA ###
++.idea
++*.iws
++*.iml
++*.ipr
++
++### NetBeans ###
++/nbproject/private/
++/nbbuild/
++/dist/
++/nbdist/
++/.nb-gradle/
++build/
++!**/src/main/**/build/
++!**/src/test/**/build/
++
++### VS Code ###
++.vscode/
+diff --git a/anycomp-marketplace/.mvn/wrapper/maven-wrapper.properties b/anycomp-marketplace/.mvn/wrapper/maven-wrapper.properties
+new file mode 100644
+index 0000000..2f94e61
+--- /dev/null
++++ b/anycomp-marketplace/.mvn/wrapper/maven-wrapper.properties
+@@ -0,0 +1,19 @@
++# Licensed to the Apache Software Foundation (ASF) under one
++# or more contributor license agreements.  See the NOTICE file
++# distributed with this work for additional information
++# regarding copyright ownership.  The ASF licenses this file
++# to you under the Apache License, Version 2.0 (the
++# "License"); you may not use this file except in compliance
++# with the License.  You may obtain a copy of the License at
++#
++#   http://www.apache.org/licenses/LICENSE-2.0
++#
++# Unless required by applicable law or agreed to in writing,
++# software distributed under the License is distributed on an
++# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
++# KIND, either express or implied.  See the License for the
++# specific language governing permissions and limitations
++# under the License.
++wrapperVersion=3.3.2
++distributionType=only-script
++distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip
+diff --git a/anycomp-marketplace/mvnw b/anycomp-marketplace/mvnw
+new file mode 100644
+index 0000000..19529dd
+--- /dev/null
++++ b/anycomp-marketplace/mvnw
+@@ -0,0 +1,259 @@
++#!/bin/sh
++# ----------------------------------------------------------------------------
++# Licensed to the Apache Software Foundation (ASF) under one
++# or more contributor license agreements.  See the NOTICE file
++# distributed with this work for additional information
++# regarding copyright ownership.  The ASF licenses this file
++# to you under the Apache License, Version 2.0 (the
++# "License"); you may not use this file except in compliance
++# with the License.  You may obtain a copy of the License at
++#
++#    http://www.apache.org/licenses/LICENSE-2.0
++#
++# Unless required by applicable law or agreed to in writing,
++# software distributed under the License is distributed on an
++# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
++# KIND, either express or implied.  See the License for the
++# specific language governing permissions and limitations
++# under the License.
++# ----------------------------------------------------------------------------
++
++# ----------------------------------------------------------------------------
++# Apache Maven Wrapper startup batch script, version 3.3.2
++#
++# Optional ENV vars
++# -----------------
++#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
++#   MVNW_REPOURL - repo url base for downloading maven distribution
++#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
++#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
++# ----------------------------------------------------------------------------
++
++set -euf
++[ "${MVNW_VERBOSE-}" != debug ] || set -x
++
++# OS specific support.
++native_path() { printf %s\\n "$1"; }
++case "$(uname)" in
++CYGWIN* | MINGW*)
++  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
++  native_path() { cygpath --path --windows "$1"; }
++  ;;
++esac
++
++# set JAVACMD and JAVACCMD
++set_java_home() {
++  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
++  if [ -n "${JAVA_HOME-}" ]; then
++    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
++      # IBM's JDK on AIX uses strange locations for the executables
++      JAVACMD="$JAVA_HOME/jre/sh/java"
++      JAVACCMD="$JAVA_HOME/jre/sh/javac"
++    else
++      JAVACMD="$JAVA_HOME/bin/java"
++      JAVACCMD="$JAVA_HOME/bin/javac"
++
++      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
++        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
++        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
++        return 1
++      fi
++    fi
++  else
++    JAVACMD="$(
++      'set' +e
++      'unset' -f command 2>/dev/null
++      'command' -v java
++    )" || :
++    JAVACCMD="$(
++      'set' +e
++      'unset' -f command 2>/dev/null
++      'command' -v javac
++    )" || :
++
++    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
++      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
++      return 1
++    fi
++  fi
++}
++
++# hash string like Java String::hashCode
++hash_string() {
++  str="${1:-}" h=0
++  while [ -n "$str" ]; do
++    char="${str%"${str#?}"}"
++    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
++    str="${str#?}"
++  done
++  printf %x\\n $h
++}
++
++verbose() { :; }
++[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }
++
++die() {
++  printf %s\\n "$1" >&2
++  exit 1
++}
++
++trim() {
++  # MWRAPPER-139:
++  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
++  #   Needed for removing poorly interpreted newline sequences when running in more
++  #   exotic environments such as mingw bash on Windows.
++  printf "%s" "${1}" | tr -d '[:space:]'
++}
++
++# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
++while IFS="=" read -r key value; do
++  case "${key-}" in
++  distributionUrl) distributionUrl=$(trim "${value-}") ;;
++  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
++  esac
++done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
++[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"
++
++case "${distributionUrl##*/}" in
++maven-mvnd-*bin.*)
++  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
++  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
++  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
++  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
++  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
++  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
++  *)
++    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
++    distributionPlatform=linux-amd64
++    ;;
++  esac
++  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
++  ;;
++maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
++*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
++esac
++
++# apply MVNW_REPOURL and calculate MAVEN_HOME
++# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
++[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
++distributionUrlName="${distributionUrl##*/}"
++distributionUrlNameMain="${distributionUrlName%.*}"
++distributionUrlNameMain="${distributionUrlNameMain%-bin}"
++MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
++MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"
++
++exec_maven() {
++  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
++  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
++}
++
++if [ -d "$MAVEN_HOME" ]; then
++  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
++  exec_maven "$@"
++fi
++
++case "${distributionUrl-}" in
++*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
++*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
++esac
++
++# prepare tmp dir
++if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
++  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
++  trap clean HUP INT TERM EXIT
++else
++  die "cannot create temp dir"
++fi
++
++mkdir -p -- "${MAVEN_HOME%/*}"
++
++# Download and Install Apache Maven
++verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
++verbose "Downloading from: $distributionUrl"
++verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
++
++# select .zip or .tar.gz
++if ! command -v unzip >/dev/null; then
++  distributionUrl="${distributionUrl%.zip}.tar.gz"
++  distributionUrlName="${distributionUrl##*/}"
++fi
++
++# verbose opt
++__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
++[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v
++
++# normalize http auth
++case "${MVNW_PASSWORD:+has-password}" in
++'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
++has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
++esac
++
++if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
++  verbose "Found wget ... using wget"
++  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
++elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
++  verbose "Found curl ... using curl"
++  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
++elif set_java_home; then
++  verbose "Falling back to use Java to download"
++  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
++  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
++  cat >"$javaSource" <<-END
++	public class Downloader extends java.net.Authenticator
++	{
++	  protected java.net.PasswordAuthentication getPasswordAuthentication()
++	  {
++	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
++	  }
++	  public static void main( String[] args ) throws Exception
++	  {
++	    setDefault( new Downloader() );
++	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
++	  }
++	}
++	END
++  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
++  verbose " - Compiling Downloader.java ..."
++  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
++  verbose " - Running Downloader.java ..."
++  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
++fi
++
++# If specified, validate the SHA-256 sum of the Maven distribution zip file
++if [ -n "${distributionSha256Sum-}" ]; then
++  distributionSha256Result=false
++  if [ "$MVN_CMD" = mvnd.sh ]; then
++    echo "Checksum validation is not supported for maven-mvnd." >&2
++    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
++    exit 1
++  elif command -v sha256sum >/dev/null; then
++    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
++      distributionSha256Result=true
++    fi
++  elif command -v shasum >/dev/null; then
++    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
++      distributionSha256Result=true
++    fi
++  else
++    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
++    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
++    exit 1
++  fi
++  if [ $distributionSha256Result = false ]; then
++    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
++    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
++    exit 1
++  fi
++fi
++
++# unzip and move
++if command -v unzip >/dev/null; then
++  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
++else
++  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
++fi
++printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
++mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"
++
++clean || :
++exec_maven "$@"
+diff --git a/anycomp-marketplace/mvnw.cmd b/anycomp-marketplace/mvnw.cmd
+new file mode 100644
+index 0000000..249bdf3
+--- /dev/null
++++ b/anycomp-marketplace/mvnw.cmd
+@@ -0,0 +1,149 @@
++<# : batch portion
++@REM ----------------------------------------------------------------------------
++@REM Licensed to the Apache Software Foundation (ASF) under one
++@REM or more contributor license agreements.  See the NOTICE file
++@REM distributed with this work for additional information
++@REM regarding copyright ownership.  The ASF licenses this file
++@REM to you under the Apache License, Version 2.0 (the
++@REM "License"); you may not use this file except in compliance
++@REM with the License.  You may obtain a copy of the License at
++@REM
++@REM    http://www.apache.org/licenses/LICENSE-2.0
++@REM
++@REM Unless required by applicable law or agreed to in writing,
++@REM software distributed under the License is distributed on an
++@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
++@REM KIND, either express or implied.  See the License for the
++@REM specific language governing permissions and limitations
++@REM under the License.
++@REM ----------------------------------------------------------------------------
++
++@REM ----------------------------------------------------------------------------
++@REM Apache Maven Wrapper startup batch script, version 3.3.2
++@REM
++@REM Optional ENV vars
++@REM   MVNW_REPOURL - repo url base for downloading maven distribution
++@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
++@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
++@REM ----------------------------------------------------------------------------
++
++@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
++@SET __MVNW_CMD__=
++@SET __MVNW_ERROR__=
++@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
++@SET PSModulePath=
++@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
++  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
++)
++@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
++@SET __MVNW_PSMODULEP_SAVE=
++@SET __MVNW_ARG0_NAME__=
++@SET MVNW_USERNAME=
++@SET MVNW_PASSWORD=
++@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
++@echo Cannot start maven from wrapper >&2 && exit /b 1
++@GOTO :EOF
++: end batch / begin powershell #>
++
++$ErrorActionPreference = "Stop"
++if ($env:MVNW_VERBOSE -eq "true") {
++  $VerbosePreference = "Continue"
++}
++
++# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
++$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
++if (!$distributionUrl) {
++  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
++}
++
++switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
++  "maven-mvnd-*" {
++    $USE_MVND = $true
++    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
++    $MVN_CMD = "mvnd.cmd"
++    break
++  }
++  default {
++    $USE_MVND = $false
++    $MVN_CMD = $script -replace '^mvnw','mvn'
++    break
++  }
++}
++
++# apply MVNW_REPOURL and calculate MAVEN_HOME
++# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
++if ($env:MVNW_REPOURL) {
++  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
++  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
++}
++$distributionUrlName = $distributionUrl -replace '^.*/',''
++$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
++$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
++if ($env:MAVEN_USER_HOME) {
++  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
++}
++$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
++$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"
++
++if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
++  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
++  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
++  exit $?
++}
++
++if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
++  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
++}
++
++# prepare tmp dir
++$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
++$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
++$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
++trap {
++  if ($TMP_DOWNLOAD_DIR.Exists) {
++    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
++    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
++  }
++}
++
++New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null
++
++# Download and Install Apache Maven
++Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
++Write-Verbose "Downloading from: $distributionUrl"
++Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
++
++$webclient = New-Object System.Net.WebClient
++if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
++  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
++}
++[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
++$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null
++
++# If specified, validate the SHA-256 sum of the Maven distribution zip file
++$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
++if ($distributionSha256Sum) {
++  if ($USE_MVND) {
++    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
++  }
++  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
++  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
++    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
++  }
++}
++
++# unzip and move
++Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
++Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
++try {
++  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
++} catch {
++  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
++    Write-Error "fail to move MAVEN_HOME"
++  }
++} finally {
++  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
++  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
++}
++
++Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
+diff --git a/anycomp-marketplace/pom.xml b/anycomp-marketplace/pom.xml
+new file mode 100644
+index 0000000..9f6da99
+--- /dev/null
++++ b/anycomp-marketplace/pom.xml
+@@ -0,0 +1,93 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
++	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
++	<modelVersion>4.0.0</modelVersion>
++	<parent>
++		<groupId>org.springframework.boot</groupId>
++		<artifactId>spring-boot-starter-parent</artifactId>
++		<version>3.4.4</version>
++		<relativePath/> <!-- lookup parent from repository -->
++	</parent>
++	<groupId>anycomp.marketplace</groupId>
++	<artifactId>anycomp-marketplace</artifactId>
++	<version>0.0.1-SNAPSHOT</version>
++	<name>anycomp-marketplace</name>
++	<description>The objectives of this project is to assess the skills of the Backend Developer who will be working on Anycomp. We primarily want to see if the developer possesses the necessary Technology Stack to work on the project - Anycomp: Platform for Company incorporation and management.</description>
++	<url/>
++	<licenses>
++		<license/>
++	</licenses>
++	<developers>
++		<developer/>
++	</developers>
++	<scm>
++		<connection/>
++		<developerConnection/>
++		<tag/>
++		<url/>
++	</scm>
++	<properties>
++		<java.version>17</java.version>
++	</properties>
++	<dependencies>
++		<dependency>
++			<groupId>org.springframework.boot</groupId>
++			<artifactId>spring-boot-starter-data-jpa</artifactId>
++		</dependency>
++		<dependency>
++			<groupId>org.springframework.boot</groupId>
++			<artifactId>spring-boot-starter-web</artifactId>
++		</dependency>
++
++		<dependency>
++			<groupId>org.postgresql</groupId>
++			<artifactId>postgresql</artifactId>
++			<scope>runtime</scope>
++		</dependency>
++		<dependency>
++			<groupId>org.projectlombok</groupId>
++			<artifactId>lombok</artifactId>
++			<optional>true</optional>
++		</dependency>
++		<dependency>
++			<groupId>org.springframework.boot</groupId>
++			<artifactId>spring-boot-starter-test</artifactId>
++			<scope>test</scope>
++		</dependency>
++		<dependency>
++			<groupId>org.springdoc</groupId>
++			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
++			<version>2.8.8</version>
++		</dependency>
++	</dependencies>
++
++	<build>
++		<plugins>
++			<plugin>
++				<groupId>org.apache.maven.plugins</groupId>
++				<artifactId>maven-compiler-plugin</artifactId>
++				<configuration>
++					<annotationProcessorPaths>
++						<path>
++							<groupId>org.projectlombok</groupId>
++							<artifactId>lombok</artifactId>
++						</path>
++					</annotationProcessorPaths>
++				</configuration>
++			</plugin>
++			<plugin>
++				<groupId>org.springframework.boot</groupId>
++				<artifactId>spring-boot-maven-plugin</artifactId>
++				<configuration>
++					<excludes>
++						<exclude>
++							<groupId>org.projectlombok</groupId>
++							<artifactId>lombok</artifactId>
++						</exclude>
++					</excludes>
++				</configuration>
++			</plugin>
++		</plugins>
++	</build>
++
++</project>
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/AnycompMarketplaceApplication.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/AnycompMarketplaceApplication.java
+new file mode 100644
+index 0000000..b01aa79
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/AnycompMarketplaceApplication.java
+@@ -0,0 +1,13 @@
++package anycomp.marketplace.com;
++
++import org.springframework.boot.SpringApplication;
++import org.springframework.boot.autoconfigure.SpringBootApplication;
++
++@SpringBootApplication
++public class AnycompMarketplaceApplication {
++
++	public static void main(String[] args) {
++		SpringApplication.run(AnycompMarketplaceApplication.class, args);
++	}
++
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/BuyerController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/BuyerController.java
+new file mode 100644
+index 0000000..5a8fdc9
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/BuyerController.java
+@@ -0,0 +1,73 @@
++package anycomp.marketplace.com.controller;
++
++import anycomp.marketplace.com.dto.BuyerDto;
++import anycomp.marketplace.com.service.BuyerService;
++import lombok.AllArgsConstructor;
++import org.springframework.http.HttpStatus;
++import org.springframework.http.ResponseEntity;
++import org.springframework.web.bind.annotation.*;
++
++import java.util.List;
++
++@AllArgsConstructor
++@RestController
++@RequestMapping("/api/buyers")
++public class BuyerController {
++
++    private BuyerService buyerService;
++
++    /**
++     * API to create new buyer and store
++     * @param buyerDto
++     * @return
++     */
++    @PostMapping
++    public ResponseEntity<BuyerDto> createBuyer(@RequestBody BuyerDto buyerDto) {
++        BuyerDto stored = buyerService.createBuyer(buyerDto);
++        return new ResponseEntity<>(stored, HttpStatus.CREATED);
++    }
++
++    /**
++     * API to retrieve buyer by id
++     * @param buyerId
++     * @return
++     */
++    @GetMapping("{id}")
++    public ResponseEntity<BuyerDto> getBuyerById(@PathVariable("id") Long buyerId) {
++        BuyerDto buyerDto = buyerService.getBuyerById(buyerId);
++        return ResponseEntity.ok(buyerDto);
++    }
++
++    /**
++     * API to retrieve all buyers
++     * @return
++     */
++    @GetMapping
++    public ResponseEntity<List<BuyerDto>> getAllBuyers() {
++        List<BuyerDto> buyers = buyerService.getAllBuyer();
++        return ResponseEntity.ok(buyers);
++    }
++
++    /**
++     * API to update buyer
++     * @param buyerId
++     * @param updatedBuyerDto
++     * @return
++     */
++    @PutMapping("{id}")
++    public ResponseEntity<BuyerDto> updateBuyer(@PathVariable("id") Long buyerId, @RequestBody BuyerDto updatedBuyerDto) {
++        BuyerDto buyerDto = buyerService.updateBuyer(buyerId, updatedBuyerDto);
++        return ResponseEntity.ok(buyerDto);
++    }
++
++    /**
++     * API to remove buyer by id
++     * @param buyerId
++     * @return
++     */
++    @DeleteMapping("{id}")
++    public ResponseEntity<String> deleteBuyer(@PathVariable("id") Long buyerId) {
++        buyerService.deleteBuyer(buyerId);
++        return new ResponseEntity<>("Successfully delete selected buyer.", HttpStatus.OK);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/ItemController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/ItemController.java
+new file mode 100644
+index 0000000..bc23031
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/ItemController.java
+@@ -0,0 +1,62 @@
++package anycomp.marketplace.com.controller;
++
++import anycomp.marketplace.com.dto.ItemDto;
++import anycomp.marketplace.com.service.ItemService;
++import lombok.AllArgsConstructor;
++import org.springframework.http.HttpStatus;
++import org.springframework.http.ResponseEntity;
++import org.springframework.web.bind.annotation.*;
++
++import java.util.List;
++
++@RestController
++@AllArgsConstructor
++@RequestMapping("/api/items")
++public class ItemController {
++
++    private ItemService itemService;
++
++    /**
++     * API to retrieve item by id
++     * @param itemId
++     * @return
++     */
++    @GetMapping("{id}")
++    public ResponseEntity<ItemDto> getItemById(@PathVariable("id") Long itemId) {
++        ItemDto itemDto = itemService.getItemById(itemId);
++        return ResponseEntity.ok(itemDto);
++    }
++
++    /**
++     * API to retrieve all items
++     * @return
++     */
++    @GetMapping
++    public ResponseEntity<List<ItemDto>> getAllItems() {
++        List<ItemDto> iiems = itemService.getAllItem();
++        return ResponseEntity.ok(iiems);
++    }
++
++    /**
++     * API to update item
++     * @param itemId
++     * @param updatedItemDto
++     * @return
++     */
++    @PutMapping("{id}")
++    public ResponseEntity<ItemDto> updateItem(@PathVariable("id") Long itemId, @RequestBody ItemDto updatedItemDto) {
++        ItemDto itemDto = itemService.updateItem(itemId, updatedItemDto);
++        return ResponseEntity.ok(itemDto);
++    }
++
++    /**
++     * API to remove item by id
++     * @param itemId
++     * @return
++     */
++    @DeleteMapping("{id}")
++    public ResponseEntity<String> deleteItem(@PathVariable("id") Long itemId) {
++        itemService.deleteItem(itemId);
++        return new ResponseEntity<>("Successfully delete selected item.", HttpStatus.OK);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/PurchaseController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/PurchaseController.java
+new file mode 100644
+index 0000000..19f808e
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/PurchaseController.java
+@@ -0,0 +1,62 @@
++package anycomp.marketplace.com.controller;
++
++import anycomp.marketplace.com.dto.ItemDto;
++import anycomp.marketplace.com.dto.PurchaseDto;
++import anycomp.marketplace.com.service.PurchaseService;
++import lombok.AllArgsConstructor;
++import org.springframework.http.HttpStatus;
++import org.springframework.http.ResponseEntity;
++import org.springframework.web.bind.annotation.*;
++
++import java.util.List;
++
++@RestController
++@AllArgsConstructor
++@RequestMapping("/api/purchases")
++public class PurchaseController {
++
++    private PurchaseService purchaseService;
++
++    /**
++     * API to retrieve purchase by id
++     * @param purchaseId
++     * @return
++     */
++    @GetMapping("{id}")
++    public ResponseEntity<PurchaseDto> getPurchaseById(@PathVariable("id") Long purchaseId) {
++        PurchaseDto purchaseDto = purchaseService.getPurchaseById(purchaseId);
++        return ResponseEntity.ok(purchaseDto);
++    }
++
++    /**
++     * API to retrieve all purchases
++     * @return
++     */
++    @GetMapping
++    public ResponseEntity<List<PurchaseDto>> getAllPurchases() {
++        List<PurchaseDto> purchases = purchaseService.getAllPurchases();
++        return ResponseEntity.ok(purchases);
++    }
++
++    /**
++     * API to create new purchase and store
++     * @param buyerId
++     * @param purchaseDto
++     * @return
++     */
++    @PostMapping("{buyerId}/{itemId}")
++    public ResponseEntity<PurchaseDto> createPurchase(@PathVariable("buyerId") Long buyerId, @PathVariable("itemId") Long itemId, @RequestBody PurchaseDto purchaseDto) {
++        PurchaseDto stored = purchaseService.createPurchase(buyerId, itemId, purchaseDto);
++        return new ResponseEntity<>(stored, HttpStatus.CREATED);
++    }
++
++    /**
++     * API to retrieve all purchases by pagination
++     * @return
++     */
++    @GetMapping("pagination/{page}/{pageSize}")
++    public ResponseEntity<List<PurchaseDto>> getAllPurchasesByPagination(@PathVariable("page") int page, @PathVariable("pageSize") int pageSize) {
++        List<PurchaseDto> purchases = purchaseService.getAllPurchasesByPagination(page, pageSize);
++        return ResponseEntity.ok(purchases);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerController.java
+new file mode 100644
+index 0000000..b9805ec
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerController.java
+@@ -0,0 +1,73 @@
++package anycomp.marketplace.com.controller;
++
++import anycomp.marketplace.com.dto.SellerDto;
++import anycomp.marketplace.com.service.SellerService;
++import lombok.AllArgsConstructor;
++import org.springframework.http.HttpStatus;
++import org.springframework.http.ResponseEntity;
++import org.springframework.web.bind.annotation.*;
++
++import java.util.List;
++
++@AllArgsConstructor
++@RestController
++@RequestMapping("/api/sellers")
++public class SellerController {
++
++    private SellerService sellerService;
++
++    /**
++     * API to create new seller and store
++     * @param sellerDto
++     * @return
++     */
++    @PostMapping
++    public ResponseEntity<SellerDto> createSeller(@RequestBody SellerDto sellerDto) {
++        SellerDto stored = sellerService.createSeller(sellerDto);
++        return new ResponseEntity<>(stored, HttpStatus.CREATED);
++    }
++
++    /**
++     * API to retrieve seller by id
++     * @param sellerId
++     * @return
++     */
++    @GetMapping("{id}")
++    public ResponseEntity<SellerDto> getSellerById(@PathVariable("id") Long sellerId) {
++        SellerDto sellerDto = sellerService.getSellerById(sellerId);
++        return ResponseEntity.ok(sellerDto);
++    }
++
++    /**
++     * API to retrieve all sellers
++     * @return
++     */
++    @GetMapping
++    public ResponseEntity<List<SellerDto>> getAllSellers() {
++        List<SellerDto> sellers = sellerService.getAllSeller();
++        return ResponseEntity.ok(sellers);
++    }
++
++    /**
++     * API to update seller
++     * @param sellerId
++     * @param updatedSellerDto
++     * @return
++     */
++    @PutMapping("{id}")
++    public ResponseEntity<SellerDto> updateSeller(@PathVariable("id") Long sellerId, @RequestBody SellerDto updatedSellerDto) {
++        SellerDto sellerDto = sellerService.updateSeller(sellerId, updatedSellerDto);
++        return ResponseEntity.ok(sellerDto);
++    }
++
++    /**
++     * API to remove seller by id
++     * @param sellerId
++     * @return
++     */
++    @DeleteMapping("{id}")
++    public ResponseEntity<String> deleteSeller(@PathVariable("id") Long sellerId) {
++        sellerService.deleteSeller(sellerId);
++        return new ResponseEntity<>("Successfully delete selected seller.", HttpStatus.OK);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerItemController.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerItemController.java
+new file mode 100644
+index 0000000..a7c8afa
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/controller/SellerItemController.java
+@@ -0,0 +1,40 @@
++package anycomp.marketplace.com.controller;
++
++import anycomp.marketplace.com.dto.ItemDto;
++import anycomp.marketplace.com.service.SellerItemService;
++import lombok.AllArgsConstructor;
++import org.springframework.http.HttpStatus;
++import org.springframework.http.ResponseEntity;
++import org.springframework.web.bind.annotation.*;
++
++import java.util.List;
++
++@RestController
++@AllArgsConstructor
++@RequestMapping("/api/{id}/items")
++public class SellerItemController {
++
++    private SellerItemService sellerItemService;
++
++    /**
++     * API to create new seller and store
++     * @param sellerId
++     * @param itemDto
++     * @return
++     */
++    @PostMapping()
++    public ResponseEntity<ItemDto> createItemToSeller(@PathVariable("id") Long sellerId, @RequestBody ItemDto itemDto) {
++        ItemDto stored = sellerItemService.createItemToSeller(sellerId, itemDto);
++        return new ResponseEntity<>(stored, HttpStatus.CREATED);
++    }
++
++    /**
++     * API to retrieve all seller's items
++     * @return
++     */
++    @GetMapping
++    public ResponseEntity<List<ItemDto>> getAllItemToSeller(@PathVariable("id") Long sellerId) {
++        List<ItemDto> items = sellerItemService.getAllItemToSeller(sellerId);
++        return ResponseEntity.ok(items);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/BuyerDto.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/BuyerDto.java
+new file mode 100644
+index 0000000..6548996
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/BuyerDto.java
+@@ -0,0 +1,24 @@
++package anycomp.marketplace.com.dto;
++
++import anycomp.marketplace.com.entity.Purchase;
++import jakarta.persistence.CascadeType;
++import jakarta.persistence.FetchType;
++import jakarta.persistence.OneToMany;
++import lombok.AllArgsConstructor;
++import lombok.Getter;
++import lombok.NoArgsConstructor;
++import lombok.Setter;
++
++import java.util.List;
++import java.util.Set;
++
++@Getter
++@Setter
++@NoArgsConstructor
++@AllArgsConstructor
++public class BuyerDto {
++    private Long id;
++    private String name;
++    private String email;
++    private List<Purchase> purchases;
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/ItemDto.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/ItemDto.java
+new file mode 100644
+index 0000000..a4a92a2
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/ItemDto.java
+@@ -0,0 +1,18 @@
++package anycomp.marketplace.com.dto;
++
++import lombok.AllArgsConstructor;
++import lombok.Getter;
++import lombok.NoArgsConstructor;
++import lombok.Setter;
++
++@Getter
++@Setter
++@NoArgsConstructor
++@AllArgsConstructor
++public class ItemDto {
++    private Long id;
++    private String name;
++    private String description;
++    private Double price;
++    private int quantity;
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/PurchaseDto.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/PurchaseDto.java
+new file mode 100644
+index 0000000..6962787
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/PurchaseDto.java
+@@ -0,0 +1,16 @@
++package anycomp.marketplace.com.dto;
++
++import lombok.*;
++import java.sql.Timestamp;
++
++@Getter
++@Setter
++@AllArgsConstructor
++@NoArgsConstructor
++public class PurchaseDto {
++    private Long id;
++    private int quantity;
++    private Timestamp purchaseDate;
++    private Long buyerId;
++    private Long itemId;
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/SellerDto.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/SellerDto.java
+new file mode 100644
+index 0000000..6a4e087
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/dto/SellerDto.java
+@@ -0,0 +1,20 @@
++package anycomp.marketplace.com.dto;
++
++import anycomp.marketplace.com.entity.Item;
++import lombok.AllArgsConstructor;
++import lombok.Getter;
++import lombok.NoArgsConstructor;
++import lombok.Setter;
++
++import java.util.List;
++
++@Getter
++@Setter
++@NoArgsConstructor
++@AllArgsConstructor
++public class SellerDto {
++    private Long id;
++    private String name;
++    private String email;
++    private List<Item> items;
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Buyer.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Buyer.java
+new file mode 100644
+index 0000000..38a92a6
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Buyer.java
+@@ -0,0 +1,34 @@
++package anycomp.marketplace.com.entity;
++
++import jakarta.persistence.*;
++import lombok.*;
++
++import java.util.ArrayList;
++import java.util.List;
++
++@Getter
++@Setter
++@NoArgsConstructor
++@AllArgsConstructor
++@Entity
++@Table(name = "buyers")
++public class Buyer {
++    @Id
++    @GeneratedValue(strategy = GenerationType.IDENTITY)
++    private Long id;
++
++    @Column(name = "name")
++    private String name;
++
++    @Column(name = "email", nullable = false, unique = true)
++    private String email;
++
++    @OneToMany(mappedBy = "buyer", cascade = CascadeType.ALL, fetch=FetchType.EAGER)
++    private List<Purchase> purchases = new ArrayList<>();
++
++    public Buyer(
++            Long id,
++            String name,
++            String email
++    ) {}
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Item.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Item.java
+new file mode 100644
+index 0000000..a10c25a
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Item.java
+@@ -0,0 +1,47 @@
++package anycomp.marketplace.com.entity;
++
++import com.fasterxml.jackson.annotation.JsonIgnore;
++import jakarta.persistence.*;
++import lombok.AllArgsConstructor;
++import lombok.Getter;
++import lombok.NoArgsConstructor;
++import lombok.Setter;
++
++@Getter
++@Setter
++@NoArgsConstructor
++@AllArgsConstructor
++@Entity
++@Table(name = "items")
++public class Item {
++    @Id
++    @GeneratedValue(strategy = GenerationType.IDENTITY)
++    private Long id;
++
++    @Column(name = "name")
++    private String name;
++
++    @Column(name = "description")
++    private String description;
++
++    @Column(name = "price")
++    private Double price;
++
++    @Column(name = "quantity")
++    private int quantity;
++
++    @ManyToOne
++    @JoinColumn(name = "seller_id", referencedColumnName = "id")
++    @JsonIgnore
++    private Seller seller;
++
++    // Constructor
++    public Item(
++            Long id,
++            String name,
++            String description,
++            Double price,
++            int quantity
++    ) {}
++
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Purchase.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Purchase.java
+new file mode 100644
+index 0000000..d7bbc11
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Purchase.java
+@@ -0,0 +1,36 @@
++package anycomp.marketplace.com.entity;
++
++import com.fasterxml.jackson.annotation.JsonIgnore;
++import jakarta.persistence.*;
++import lombok.*;
++
++import java.sql.Timestamp;
++
++@Getter
++@Setter
++@NoArgsConstructor
++@AllArgsConstructor
++@Entity
++@Table(name = "purchases")
++public class Purchase {
++    @Id
++    @GeneratedValue(strategy = GenerationType.IDENTITY)
++    private Long id;
++
++    private int quantity;
++    private Timestamp purchaseDate;
++
++    @ManyToOne(cascade = CascadeType.ALL)
++    @JoinColumn(name = "buyer_id", referencedColumnName = "id")
++    @JsonIgnore
++    private Buyer buyer;
++
++    @ManyToOne(cascade = CascadeType.ALL)
++    @JoinColumn(name = "item_id", referencedColumnName = "id")
++    @JsonIgnore
++    private Item item;
++
++    // Constructor
++    public Purchase(Long id, int quantity, Timestamp purchaseDate) {
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Seller.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Seller.java
+new file mode 100644
+index 0000000..7cf65b7
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/entity/Seller.java
+@@ -0,0 +1,38 @@
++package anycomp.marketplace.com.entity;
++
++import jakarta.persistence.*;
++import lombok.AllArgsConstructor;
++import lombok.Getter;
++import lombok.NoArgsConstructor;
++import lombok.Setter;
++
++import java.util.ArrayList;
++import java.util.List;
++
++@Getter
++@Setter
++@NoArgsConstructor
++@AllArgsConstructor
++@Entity
++@Table(name = "sellers")
++public class Seller {
++    @Id
++    @GeneratedValue(strategy = GenerationType.IDENTITY)
++    private Long id;
++
++    @Column(name = "name")
++    private String name;
++
++    @Column(name = "email", nullable = false, unique = true)
++    private String email;
++
++    @OneToMany(mappedBy = "seller", cascade = CascadeType.ALL)
++    private List<Item> item = new ArrayList<>();
++
++    // Constructor
++    public Seller(
++            Long id,
++            String name,
++            String email
++    ) {}
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/OutStockException.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/OutStockException.java
+new file mode 100644
+index 0000000..89a8626
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/OutStockException.java
+@@ -0,0 +1,15 @@
++package anycomp.marketplace.com.exception;
++
++import org.springframework.http.HttpStatus;
++import org.springframework.web.bind.annotation.ResponseStatus;
++
++@ResponseStatus(value = HttpStatus.CONFLICT)
++public class OutStockException extends RuntimeException {
++    /**
++     * 409 conflict
++     * @param message
++     */
++    public OutStockException(String message) {
++        super(message);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/ResourceNotFoundException.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/ResourceNotFoundException.java
+new file mode 100644
+index 0000000..7960348
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/exception/ResourceNotFoundException.java
+@@ -0,0 +1,15 @@
++package anycomp.marketplace.com.exception;
++
++import org.springframework.http.HttpStatus;
++import org.springframework.web.bind.annotation.ResponseStatus;
++
++@ResponseStatus(value = HttpStatus.NOT_FOUND)
++public class ResourceNotFoundException extends RuntimeException {
++    /**
++     * 404 not found
++     * @param message
++     */
++    public ResourceNotFoundException(String message) {
++        super(message);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/BuyerMapper.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/BuyerMapper.java
+new file mode 100644
+index 0000000..5d4312b
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/BuyerMapper.java
+@@ -0,0 +1,30 @@
++package anycomp.marketplace.com.mapper;
++
++import anycomp.marketplace.com.dto.BuyerDto;
++import anycomp.marketplace.com.entity.Buyer;
++
++public class BuyerMapper {
++    /**
++     * Convert buyer into buyerDto
++     **/
++    public static BuyerDto mapToBuyerDto(Buyer buyer) {
++        return new BuyerDto(
++                buyer.getId(),
++                buyer.getName(),
++                buyer.getEmail(),
++                buyer.getPurchases()
++        );
++    }
++
++    /**
++     * Convert buyerDto into buyer
++     **/
++    public static Buyer mapToBuyer(BuyerDto buyerDto) {
++        return new Buyer(
++                buyerDto.getId(),
++                buyerDto.getName(),
++                buyerDto.getEmail(),
++                buyerDto.getPurchases()
++        );
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/ItemMapper.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/ItemMapper.java
+new file mode 100644
+index 0000000..9c2659f
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/ItemMapper.java
+@@ -0,0 +1,32 @@
++package anycomp.marketplace.com.mapper;
++
++import anycomp.marketplace.com.dto.ItemDto;
++import anycomp.marketplace.com.entity.Item;
++
++public class ItemMapper {
++    /**
++     * Convert item into itemDto
++     **/
++    public static ItemDto mapToItemDto(Item item) {
++        return new ItemDto(
++                item.getId(),
++                item.getName(),
++                item.getDescription(),
++                item.getPrice(),
++                item.getQuantity()
++        );
++    }
++
++    /**
++     * Convert itemDto into item
++     **/
++    public static Item mapToItem(ItemDto itemDto) {
++        return new Item(
++                itemDto.getId(),
++                itemDto.getName(),
++                itemDto.getDescription(),
++                itemDto.getPrice(),
++                itemDto.getQuantity()
++        );
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/PurchaseMapper.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/PurchaseMapper.java
+new file mode 100644
+index 0000000..d33a558
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/PurchaseMapper.java
+@@ -0,0 +1,30 @@
++package anycomp.marketplace.com.mapper;
++
++import anycomp.marketplace.com.dto.PurchaseDto;
++import anycomp.marketplace.com.entity.Purchase;
++
++public class PurchaseMapper {
++    /**
++     * Convert purchase into purchaseDto
++     **/
++    public static PurchaseDto mapToPurchaseDto(Purchase purchase) {
++        return new PurchaseDto(
++                purchase.getId(),
++                purchase.getQuantity(),
++                purchase.getPurchaseDate(),
++                purchase.getBuyer().getId(),
++                purchase.getItem().getId()
++        );
++    }
++
++    /**
++     * Convert purchaseDto into purchase
++     **/
++    public static Purchase mapToPurchase(PurchaseDto purchaseDto) {
++        return new Purchase(
++                purchaseDto.getId(),
++                purchaseDto.getQuantity(),
++                purchaseDto.getPurchaseDate()
++        );
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/SellerMapper.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/SellerMapper.java
+new file mode 100644
+index 0000000..bb390a6
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/mapper/SellerMapper.java
+@@ -0,0 +1,30 @@
++package anycomp.marketplace.com.mapper;
++
++import anycomp.marketplace.com.dto.SellerDto;
++import anycomp.marketplace.com.entity.Seller;
++
++public class SellerMapper {
++    /**
++     * Convert seller into sellerDto
++     **/
++    public static SellerDto mapToSellerDto(Seller seller) {
++        return new SellerDto(
++                seller.getId(),
++                seller.getName(),
++                seller.getEmail(),
++                seller.getItem()
++        );
++    }
++
++    /**
++     * Convert sellerDto into seller
++     **/
++    public static Seller mapToSeller(SellerDto sellerDto) {
++        return new Seller(
++                sellerDto.getId(),
++                sellerDto.getName(),
++                sellerDto.getEmail(),
++                sellerDto.getItems()
++        );
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/BuyerRepository.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/BuyerRepository.java
+new file mode 100644
+index 0000000..310f472
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/BuyerRepository.java
+@@ -0,0 +1,7 @@
++package anycomp.marketplace.com.repository;
++
++import anycomp.marketplace.com.entity.Buyer;
++import org.springframework.data.jpa.repository.JpaRepository;
++
++public interface BuyerRepository extends JpaRepository<Buyer, Long> {
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/ItemRepository.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/ItemRepository.java
+new file mode 100644
+index 0000000..da5e231
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/ItemRepository.java
+@@ -0,0 +1,11 @@
++package anycomp.marketplace.com.repository;
++
++import anycomp.marketplace.com.entity.Item;
++import org.springframework.data.jpa.repository.JpaRepository;
++
++import java.util.List;
++
++public interface ItemRepository extends JpaRepository<Item, Long> {
++    // find all items belong to the seller id
++    List<Item> findAllBySellerId(Long sellerId);
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/PurchaseRepository.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/PurchaseRepository.java
+new file mode 100644
+index 0000000..7a69b76
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/PurchaseRepository.java
+@@ -0,0 +1,7 @@
++package anycomp.marketplace.com.repository;
++
++import anycomp.marketplace.com.entity.Purchase;
++import org.springframework.data.jpa.repository.JpaRepository;
++
++public interface PurchaseRepository extends JpaRepository<Purchase, Long> {
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/SellerRepository.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/SellerRepository.java
+new file mode 100644
+index 0000000..90e87ab
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/repository/SellerRepository.java
+@@ -0,0 +1,7 @@
++package anycomp.marketplace.com.repository;
++
++import anycomp.marketplace.com.entity.Seller;
++import org.springframework.data.jpa.repository.JpaRepository;
++
++public interface SellerRepository extends JpaRepository<Seller, Long> {
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/BuyerService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/BuyerService.java
+new file mode 100644
+index 0000000..32e04e3
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/BuyerService.java
+@@ -0,0 +1,22 @@
++package anycomp.marketplace.com.service;
++
++import anycomp.marketplace.com.dto.BuyerDto;
++
++import java.util.List;
++
++public interface BuyerService {
++    /** Create new buyer **/
++    BuyerDto createBuyer(BuyerDto buyerDto);
++
++    /** Get buyers **/
++    List<BuyerDto> getAllBuyer();
++
++    /** Get specific buyer **/
++    BuyerDto getBuyerById(Long buyerId);
++
++    /** Update buyer **/
++    BuyerDto updateBuyer(Long buyerId, BuyerDto updatedBuyerDto);
++
++    /** Delete specific buyer **/
++    void deleteBuyer(Long buyerId);
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/ItemService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/ItemService.java
+new file mode 100644
+index 0000000..058f5d3
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/ItemService.java
+@@ -0,0 +1,19 @@
++package anycomp.marketplace.com.service;
++
++import anycomp.marketplace.com.dto.ItemDto;
++
++import java.util.List;
++
++public interface ItemService {
++    /** Get specific item **/
++    ItemDto getItemById(Long itemId);
++
++    /** Get all items **/
++    List<ItemDto> getAllItem();
++
++    /** Update item **/
++    ItemDto updateItem(Long itemId, ItemDto updatedItemDto);
++
++    /** Delete specific item **/
++    void deleteItem(Long itemId);
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/PurchaseService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/PurchaseService.java
+new file mode 100644
+index 0000000..0dd0a6a
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/PurchaseService.java
+@@ -0,0 +1,19 @@
++package anycomp.marketplace.com.service;
++
++import anycomp.marketplace.com.dto.PurchaseDto;
++
++import java.util.List;
++
++public interface PurchaseService {
++    /** Get specific purchase **/
++    PurchaseDto getPurchaseById(Long purchaseId);
++
++    /** Get all purchases **/
++    List<PurchaseDto> getAllPurchases();
++
++    /** Make purchase **/
++    PurchaseDto createPurchase(Long buyerId, Long itemId, PurchaseDto purchaseDto);
++
++    /** Get all purchases by pagination **/
++    List<PurchaseDto> getAllPurchasesByPagination(int page, int pageSize);
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerItemService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerItemService.java
+new file mode 100644
+index 0000000..8d70047
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerItemService.java
+@@ -0,0 +1,13 @@
++package anycomp.marketplace.com.service;
++
++import anycomp.marketplace.com.dto.ItemDto;
++
++import java.util.List;
++
++public interface SellerItemService {
++    /** Create new item for the seller **/
++    ItemDto createItemToSeller(Long sellerId, ItemDto itemDto);
++
++    /** Get all items belong to the seller **/
++    List<ItemDto> getAllItemToSeller(Long sellerId);
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerService.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerService.java
+new file mode 100644
+index 0000000..f21bf7a
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/SellerService.java
+@@ -0,0 +1,22 @@
++package anycomp.marketplace.com.service;
++
++import anycomp.marketplace.com.dto.SellerDto;
++
++import java.util.List;
++
++public interface SellerService {
++    /** Create new seller **/
++    SellerDto createSeller(SellerDto sellerDto);
++
++    /** Get specific seller **/
++    SellerDto getSellerById(Long sellerId);
++
++    /** Get sellers **/
++    List<SellerDto> getAllSeller();
++
++    /** Update seller **/
++    SellerDto updateSeller(Long sellerId, SellerDto updatedSellerDto);
++
++    /** Delete specific seller **/
++    void deleteSeller(Long sellerId);
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/BuyerServiceImpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/BuyerServiceImpl.java
+new file mode 100644
+index 0000000..9ccd5e2
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/BuyerServiceImpl.java
+@@ -0,0 +1,95 @@
++package anycomp.marketplace.com.service.impl;
++
++import anycomp.marketplace.com.dto.BuyerDto;
++import anycomp.marketplace.com.entity.Buyer;
++import anycomp.marketplace.com.exception.ResourceNotFoundException;
++import anycomp.marketplace.com.mapper.BuyerMapper;
++import anycomp.marketplace.com.repository.BuyerRepository;
++import anycomp.marketplace.com.service.BuyerService;
++import lombok.AllArgsConstructor;
++import org.springframework.data.domain.Sort;
++import org.springframework.stereotype.Service;
++
++import java.util.List;
++import java.util.stream.Collectors;
++
++@Service
++@AllArgsConstructor
++public class BuyerServiceImpl implements BuyerService {
++
++    private BuyerRepository buyerRepository;
++
++    /**
++     * crete new buyer method
++     * @param buyerDto
++     * @return
++     */
++    @Override
++    public BuyerDto createBuyer(BuyerDto buyerDto) {
++        Buyer buyer = BuyerMapper.mapToBuyer(buyerDto);
++        Buyer save = buyerRepository.save(buyer);
++
++        return BuyerMapper.mapToBuyerDto(save);
++    }
++
++    /**
++     * get buyer by id method
++     * @param buyerId
++     * @return
++     */
++    @Override
++    public BuyerDto getBuyerById(Long buyerId) {
++        Buyer buyer = buyerRepository.findById(buyerId)
++                .orElseThrow(() -> new ResourceNotFoundException("Buyer not found from the given id: " + buyerId));
++
++        return BuyerMapper.mapToBuyerDto(buyer);
++    }
++
++    /**
++     * get all the buyer method
++     * @return
++     */
++    @Override
++    public List<BuyerDto> getAllBuyer() {
++        List<Buyer> buyers = buyerRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
++        return buyers
++                .stream()
++                .map(BuyerMapper::mapToBuyerDto)
++                .collect(Collectors.toList());
++    }
++
++    /**
++     * find buyer and update method
++     * @param buyerId
++     * @param updatedBuyerDto
++     * @return
++     */
++    @Override
++    public BuyerDto updateBuyer(Long buyerId, BuyerDto updatedBuyerDto) {
++        // find
++        Buyer buyer = buyerRepository.findById(buyerId)
++                .orElseThrow(() -> new ResourceNotFoundException("Buyer invalid from the given id: " + buyerId));
++
++        // set
++        buyer.setName(updatedBuyerDto.getName());
++        buyer.setEmail(updatedBuyerDto.getEmail());
++
++        Buyer updatedObj = buyerRepository.save(buyer);
++
++        return BuyerMapper.mapToBuyerDto(updatedObj);
++
++    }
++
++    /**
++     * find buyer and delete method
++     * @param buyerId
++     */
++    @Override
++    public void deleteBuyer(Long buyerId) {
++        // find
++        Buyer buyer = buyerRepository.findById(buyerId)
++                .orElseThrow(() -> new ResourceNotFoundException("Buyer invalid from the given id: " + buyerId));
++
++        buyerRepository.deleteById(buyerId);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/ItemServiceImpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/ItemServiceImpl.java
+new file mode 100644
+index 0000000..80124dd
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/ItemServiceImpl.java
+@@ -0,0 +1,81 @@
++package anycomp.marketplace.com.service.impl;
++
++import anycomp.marketplace.com.dto.ItemDto;
++import anycomp.marketplace.com.entity.Item;
++import anycomp.marketplace.com.exception.ResourceNotFoundException;
++import anycomp.marketplace.com.mapper.ItemMapper;
++import anycomp.marketplace.com.repository.ItemRepository;
++import anycomp.marketplace.com.service.ItemService;
++import lombok.AllArgsConstructor;
++import org.springframework.data.domain.Sort;
++import org.springframework.stereotype.Service;
++
++import java.util.List;
++import java.util.stream.Collectors;
++
++@Service
++@AllArgsConstructor
++public class ItemServiceImpl implements ItemService {
++
++    private ItemRepository itemRepository;
++
++    /**
++     * get item by id method
++     * @param itemId
++     * @return
++     */
++    @Override
++    public ItemDto getItemById(Long itemId) {
++        Item item = itemRepository.findById(itemId)
++                .orElseThrow(() -> new ResourceNotFoundException("Item not found from given id: " + itemId));
++
++        return ItemMapper.mapToItemDto(item);
++    }
++
++    /**
++     * get all the items method
++     * @return
++     */
++    @Override
++    public List<ItemDto> getAllItem() {
++        List<Item> items = itemRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
++        return items
++                .stream()
++                .map(ItemMapper::mapToItemDto)
++                .collect(Collectors.toList());
++    }
++
++    /**
++     * find item and update method
++     * @param itemId
++     * @param updatedItemDto
++     * @return
++     */
++    @Override
++    public ItemDto updateItem(Long itemId, ItemDto updatedItemDto) {
++        Item item = itemRepository.findById(itemId)
++                .orElseThrow(() -> new ResourceNotFoundException("Item not found from given id: " + itemId));
++
++        item.setName(updatedItemDto.getName());
++        item.setDescription(updatedItemDto.getDescription());
++        item.setPrice(updatedItemDto.getPrice());
++        item.setQuantity(updatedItemDto.getQuantity());
++        //item.setSeller(item.getSeller());
++
++        Item updatedObj = itemRepository.save(item);
++
++        return ItemMapper.mapToItemDto(updatedObj);
++    }
++
++    /**
++     * find item and delete method
++     * @param itemId
++     */
++    @Override
++    public void deleteItem(Long itemId) {
++        Item item = itemRepository.findById(itemId)
++                .orElseThrow(() -> new ResourceNotFoundException("Item not found from given id: " + itemId));
++
++        itemRepository.deleteById(itemId);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/PurchaseServiceimpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/PurchaseServiceimpl.java
+new file mode 100644
+index 0000000..121962d
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/PurchaseServiceimpl.java
+@@ -0,0 +1,101 @@
++package anycomp.marketplace.com.service.impl;
++
++import anycomp.marketplace.com.dto.PurchaseDto;
++import anycomp.marketplace.com.entity.Buyer;
++import anycomp.marketplace.com.entity.Item;
++import anycomp.marketplace.com.entity.Purchase;
++import anycomp.marketplace.com.exception.OutStockException;
++import anycomp.marketplace.com.exception.ResourceNotFoundException;
++import anycomp.marketplace.com.mapper.PurchaseMapper;
++import anycomp.marketplace.com.repository.BuyerRepository;
++import anycomp.marketplace.com.repository.ItemRepository;
++import anycomp.marketplace.com.repository.PurchaseRepository;
++import anycomp.marketplace.com.service.PurchaseService;
++import lombok.AllArgsConstructor;
++import org.springframework.data.domain.Page;
++import org.springframework.data.domain.PageRequest;
++import org.springframework.data.domain.Sort;
++import org.springframework.stereotype.Service;
++
++import java.util.List;
++import java.util.stream.Collectors;
++
++@Service
++@AllArgsConstructor
++public class PurchaseServiceimpl implements PurchaseService {
++
++    private PurchaseRepository purchaseRepository;
++    private BuyerRepository buyerRepository;
++    private ItemRepository itemRepository;
++
++    /**
++     * get purchase by id method
++     * @param purchaseId
++     * @return
++     */
++    @Override
++    public PurchaseDto getPurchaseById(Long purchaseId) {
++        Purchase purchase = purchaseRepository.findById(purchaseId)
++                .orElseThrow(() -> new ResourceNotFoundException("Purchase not found from given id: " + purchaseId));
++
++        return PurchaseMapper.mapToPurchaseDto(purchase);
++    }
++
++    /**
++     * get all the purchases method
++     * @return
++     */
++    @Override
++    public List<PurchaseDto> getAllPurchases() {
++        List<Purchase> purchases = purchaseRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
++
++        return purchases
++                .stream()
++                .map(PurchaseMapper::mapToPurchaseDto)
++                .collect(Collectors.toList());
++    }
++
++    @Override
++    public PurchaseDto createPurchase(Long buyerId, Long itemId, PurchaseDto purchaseDto) {
++        Buyer buyer = buyerRepository.findById(buyerId)
++                .orElseThrow(() -> new ResourceNotFoundException("Buyer not found from given id: " + buyerId));
++
++        Item item = itemRepository.findById(itemId)
++                .orElseThrow(() -> new ResourceNotFoundException("Item not found from given id: " + itemId));
++
++        // quantity less than 0
++        if(item.getQuantity() < 1) {
++            throw new OutStockException("Item out of stock.");
++        }
++
++        // compare purchase quantity & current item quantity
++        if(purchaseDto.getQuantity() > item.getQuantity()) {
++            throw new OutStockException("Item not enough stock to be purchased. Stock left: (" + (item.getQuantity() - purchaseDto.getQuantity()) + ")");
++        }
++
++        Purchase purchase = PurchaseMapper.mapToPurchase(purchaseDto);
++
++        purchase.setBuyer(buyer);
++        purchase.setItem(item);
++        purchase.setQuantity(purchaseDto.getQuantity());
++        purchase.setPurchaseDate(purchaseDto.getPurchaseDate());
++
++        Purchase save = purchaseRepository.save(purchase);
++
++        // update item quantity
++        item.setQuantity(item.getQuantity() - save.getQuantity());
++        itemRepository.save(item);
++
++        return PurchaseMapper.mapToPurchaseDto(save);
++    }
++
++    @Override
++    public List<PurchaseDto> getAllPurchasesByPagination(int page, int pageSize) {
++        Page<Purchase> purchases = purchaseRepository.findAll(PageRequest.of(page, pageSize));
++
++        return purchases
++                .stream()
++                .map(PurchaseMapper::mapToPurchaseDto)
++                .collect(Collectors.toList());
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerItemServiceImpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerItemServiceImpl.java
+new file mode 100644
+index 0000000..f733186
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerItemServiceImpl.java
+@@ -0,0 +1,60 @@
++package anycomp.marketplace.com.service.impl;
++
++import anycomp.marketplace.com.dto.ItemDto;
++import anycomp.marketplace.com.entity.Item;
++import anycomp.marketplace.com.entity.Seller;
++import anycomp.marketplace.com.exception.ResourceNotFoundException;
++import anycomp.marketplace.com.mapper.ItemMapper;
++import anycomp.marketplace.com.repository.ItemRepository;
++import anycomp.marketplace.com.repository.SellerRepository;
++import anycomp.marketplace.com.service.SellerItemService;
++import lombok.AllArgsConstructor;
++import org.springframework.stereotype.Service;
++
++import java.util.List;
++import java.util.stream.Collectors;
++
++@Service
++@AllArgsConstructor
++public class SellerItemServiceImpl implements SellerItemService {
++
++    private SellerRepository sellerRepository;
++    private ItemRepository itemRepository;
++
++    /**
++     * add item to the seller method
++     * @param sellerId
++     * @param itemDto
++     * @return
++     */
++    @Override
++    public ItemDto createItemToSeller(Long sellerId, ItemDto itemDto) {
++        Seller seller = sellerRepository.findById(sellerId)
++                .orElseThrow(() -> new ResourceNotFoundException("Seller not found from the given id: " + sellerId));
++
++        Item item = ItemMapper.mapToItem(itemDto);
++
++        item.setName(itemDto.getName());
++        item.setDescription(itemDto.getDescription());
++        item.setPrice(itemDto.getPrice());
++        item.setQuantity(itemDto.getQuantity());
++        item.setSeller(seller);
++
++        Item save = itemRepository.save(item);
++
++        return ItemMapper.mapToItemDto(save);
++    }
++
++    /**
++     * get all the item from the seller method
++     * @return
++     */
++    @Override
++    public List<ItemDto> getAllItemToSeller(Long sellerId) {
++        List<Item> items = itemRepository.findAllBySellerId(sellerId);
++        return items
++                .stream()
++                .map(ItemMapper::mapToItemDto)
++                .collect(Collectors.toList());
++    }
++}
+diff --git a/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerServiceImpl.java b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerServiceImpl.java
+new file mode 100644
+index 0000000..ac7c437
+--- /dev/null
++++ b/anycomp-marketplace/src/main/java/anycomp/marketplace/com/service/impl/SellerServiceImpl.java
+@@ -0,0 +1,91 @@
++package anycomp.marketplace.com.service.impl;
++
++import anycomp.marketplace.com.dto.SellerDto;
++import anycomp.marketplace.com.entity.Seller;
++import anycomp.marketplace.com.exception.ResourceNotFoundException;
++import anycomp.marketplace.com.mapper.SellerMapper;
++import anycomp.marketplace.com.repository.SellerRepository;
++import anycomp.marketplace.com.service.SellerService;
++import lombok.AllArgsConstructor;
++import org.springframework.data.domain.Sort;
++import org.springframework.stereotype.Service;
++
++import java.util.List;
++import java.util.stream.Collectors;
++
++@Service
++@AllArgsConstructor
++public class SellerServiceImpl implements SellerService {
++    private SellerRepository sellerRepository;
++
++
++    /**
++     * crete new seller method
++     * @param sellerDto
++     * @return
++     */
++    @Override
++    public SellerDto createSeller(SellerDto sellerDto) {
++        Seller seller = SellerMapper.mapToSeller(sellerDto);
++        Seller save = sellerRepository.save(seller);
++
++        return SellerMapper.mapToSellerDto(save);
++    }
++
++    /**
++     * get selleer by id method
++     * @param sellerId
++     * @return
++     */
++    @Override
++    public SellerDto getSellerById(Long sellerId) {
++        Seller seller = sellerRepository.findById(sellerId)
++                .orElseThrow(() -> new ResourceNotFoundException("Seller not found from the given id: " + sellerId));
++
++        return SellerMapper.mapToSellerDto(seller);
++    }
++
++    /**
++     * get all the seller method
++     * @return
++     */
++    @Override
++    public List<SellerDto> getAllSeller() {
++        List<Seller> sellers = sellerRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
++        return sellers
++                .stream()
++                .map(SellerMapper::mapToSellerDto)
++                .collect(Collectors.toList());
++    }
++
++    /**
++     * find seller and update method
++     * @param sellerId
++     * @param updatedSellerDto
++     * @return
++     */
++    @Override
++    public SellerDto updateSeller(Long sellerId, SellerDto updatedSellerDto) {
++        Seller seller = sellerRepository.findById(sellerId)
++                .orElseThrow(() -> new ResourceNotFoundException("Seller invalid from the given id: " + sellerId));
++
++        seller.setName(updatedSellerDto.getName());
++        seller.setEmail(updatedSellerDto.getEmail());
++
++        Seller updatedObj = sellerRepository.save(seller);
++
++        return SellerMapper.mapToSellerDto(updatedObj);
++    }
++
++    /**
++     * find seller and delete method
++     * @param sellerId
++     */
++    @Override
++    public void deleteSeller(Long sellerId) {
++        Seller seller = sellerRepository.findById(sellerId)
++                .orElseThrow(() -> new ResourceNotFoundException("Seller invalid from the given id: " + sellerId));
++
++        sellerRepository.deleteById(sellerId);
++    }
++}
+diff --git a/anycomp-marketplace/src/main/resources/application.properties b/anycomp-marketplace/src/main/resources/application.properties
+new file mode 100644
+index 0000000..ad770ae
+--- /dev/null
++++ b/anycomp-marketplace/src/main/resources/application.properties
+@@ -0,0 +1,6 @@
++spring.application.name=anycomp-marketplace
++spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
++spring.datasource.username=postgres
++spring.datasource.password=postgres
++
++spring.jpa.hibernate.ddl-auto=update
+\ No newline at end of file
+diff --git a/anycomp-marketplace/src/test/java/anycomp/marketplace/com/AnycompMarketplaceApplicationTests.java b/anycomp-marketplace/src/test/java/anycomp/marketplace/com/AnycompMarketplaceApplicationTests.java
+new file mode 100644
+index 0000000..d40eccd
+--- /dev/null
++++ b/anycomp-marketplace/src/test/java/anycomp/marketplace/com/AnycompMarketplaceApplicationTests.java
+@@ -0,0 +1,13 @@
++package anycomp.marketplace.com;
++
++import org.junit.jupiter.api.Test;
++import org.springframework.boot.test.context.SpringBootTest;
++
++@SpringBootTest
++class AnycompMarketplaceApplicationTests {
++
++	@Test
++	void contextLoads() {
++	}
++
++}
+diff --git a/patching.patch b/patching.patch
+new file mode 100644
+index 0000000..e69de29
